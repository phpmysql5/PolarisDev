<apex:page title="Agreement: {!agreement.Name}" 
    standardController="echosign_dev1__SIGN_Agreement__c" 
    sidebar="{! IF( NOT ISNULL( $CurrentPage.parameters.showheadersidebar), $CurrentPage.parameters.showheadersidebar, IF( !ISNULL(cusSettings) && cusSettings.Hide_Sidebar_Agreement_Page__c, 'false', 'true' ) ) }" 
    showHeader="{!IF(NOT ISNULL($CurrentPage.parameters.showheadersidebar),$CurrentPage.parameters.showheadersidebar,'true')}" 
    extensions="echosign_dev1.EchoSignAgreementAdvanced" 
    action="{!initAgreement}" 
    cache="true">
    
    <apex:includeScript value="{!$Resource.echosign_dev1__walkmeimpt}"/>
    
    <apex:includeScript value="/support/console/22.0/integration.js"/>
    
	<apex:includeScript value="{!$Resource.echosign_dev1__jquery321}"/>
    <apex:includeScript value="{!URLFOR($Resource.echosign_dev1__jqueryui1120, 'jquery-ui-1.12.0.custom/jquery-ui.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.echosign_dev1__jqueryui1120, 'jquery-ui-1.12.0.custom/jquery-ui.min.css')}"/>


            <script type="text/javascript">
                $jquery = jQuery.noConflict();

                function getSelectorFromSalesforceId(salesforceId) {
                    return '#' + salesforceId.replace(/([#;&,.+*~':"!^$\[\]()=>|/])/g, '\\\\$1');
                }
                  
                function salesforceJQuery(salesforceId) {
                    return jQuery(getSelectorFromSalesforceId(salesforceId));
                }
                
                var popup;
                
                var isAndroid = (navigator.userAgent.match(/Android/i) != null) || isSneakyAndroid();

                function isSneakyAndroid() {
                    var isMacIntel = false;
                    var isLinuxArm = false;
  
                    if (navigator.userAgent.match(/Intel Mac OS/i) != null) {
                        isMacIntel = true;
                    }
                    
                    if (navigator.platform.match(/Linux/i) != null) {
                        isLinuxArm = true;
                    }
                    
                    if (isMacIntel && isLinuxArm) {
                        return true;
                    }
                    
                    return false;
                }
                
                var isiPad = navigator.userAgent.match(/iPad/i) != null; 
                var isiPhone = navigator.userAgent.match(/iPhone/i) != null;
                var isSfdcApp = navigator.userAgent.match(/SalesforceTouchContainer/i) != null;
                var isSafari = navigator.userAgent.match(/Safari/i) != null && navigator.userAgent.match(/Chrome/i) == null;
                
                //var isIosMobile = ( ( isiPad || isiPhone ) && !isSfdcTouch );
                var isIosMobile = ( isiPad || isiPhone || isAndroid );
                   
                var isIE6 = window.isIE6;
                
                if( isIosMobile || isAndroid ) {
                    isIE6 = true;
                }
                
                function showSpinner() {
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'none';
                    document.getElementById('{!$Component.loadingSpinnerSection}').style.display = 'block';
                }
        
                function hideSpinner() {
                    document.getElementById('{!$Component.loadingSpinnerSection}').style.display = 'none';
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                }
                
                function showReminderSpinner() {
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'none';
                    document.getElementById('{!$Component.loadingSpinnerRemindSection}').style.display = 'block';
                }
        
                function hideReminderSpinner() {
                    document.getElementById('{!$Component.loadingSpinnerRemindSection}').style.display = 'none';
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                }
                                
                function showDeleteSpinner() {
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'none';
                    document.getElementById('{!$Component.loadingSpinnerDeleteSection}').style.display = 'block';
                }
        
                function hideDeleteSpinner() {
                    document.getElementById('{!$Component.loadingSpinnerDeleteSection}').style.display = 'none';
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                }
                
                function showCancelSpinner() {
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'none';
                    document.getElementById('{!$Component.loadingSpinnerCancelSection}').style.display = 'block';
                }
        
                function hideCancelSpinner() {
                    document.getElementById('{!$Component.loadingSpinnerCancelSection}').style.display = 'none';
                    document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                }
                
                function showReplaceSignerDialog() {
                    $jquery("#replaceSignerDialog").dialog("open");
                }
                
                function hideReplaceSignerDialog() {
                    $jquery("#replaceSignerDialog").dialog("close");
                }
                
                function showCancelAgreementDialog() {
                    $jquery("#cancelAgreementDialog").dialog("open");
                }
                
                function hideCancelAgreementDialog() {
                    $jquery("#cancelAgreementDialog").dialog("close");
                }
                
                function showRemoveAgreementDialog() {
                    $jquery("#removeAgreementDialog").dialog("open");
                }
                
                function hideRemoveAgreementDialog() {
                    $jquery("#removeAgreementDialog").dialog("close");
                }
                                                                
                $jquery(document).ready( function() {
                    try {
                        $jquery("#replaceSignerDialog").dialog(
                        {
                            width:"30%",
                            autoOpen:false,
                            position:{ my: "center", at: "center", of: window },
                            modal:true,
                            closeable:false,
                            resizable:false,
                            draggable:true,
                            overlay:{opacity:5.0,background:"red"},
                            dialogClass:"esDialogClass",
                            title:"{!$Label.Replace_Signer_Button_Label}"
                        });
                        
                        $jquery("#cancelAgreementDialog").dialog(
                        {
                            width:"30%",
                            autoOpen:false,
                            position:{ my: "center", at: "center", of: window },
                            modal:true,
                            closeable:false,
                            resizable:false,
                            draggable:true,
                            overlay:{opacity:5.0,background:"red"},
                            dialogClass:"esDialogClass",
                            title:"{!$Label.echosign_dev1__cancel_agreement_button_label}"
                        });
                        
                        $jquery("#removeAgreementDialog").dialog(
                        {
                            width:"30%",
                            autoOpen:false,
                            position:{ my: "center", at: "center", of: window },
                            modal:true,
                            closeable:false,
                            resizable:false,
                            draggable:true,
                            overlay:{opacity:5.0,background:"red"},
                            dialogClass:"esDialogClass",
                            title:"{!$Label.echosign_dev1__delete_agreement_button_label}"
                        });
                    } catch(err) {
                        //Ignore, jquery version conflict from sidebar
                        console.log(err);
                    }
                });
            </script> 
    
    <style type="text/css">
    
          #sortable { list-style-type: none; margin: 0; padding: 0; width: 60%; }
          #sortable li { margin: 0 3px 3px 3px; padding: 0.4em; padding-left: 1.5em; font-size: 1.4em; height: 30px; }
          #sortable li span { position: absolute; margin-left: -1.3em; }
    
          #sortableDocuments { list-style-type: none; margin: 0; padding: 0; width: 60%; }
          #sortableDocuments li { margin: 0 3px 3px 3px; padding: 0.4em; padding-left: 1.5em; font-size: 1.4em; height: 30px; }
          #sortableDocuments li span { position: absolute; margin-left: -1.3em; }
          
        .recipientInputComponent {
            padding-top: 3px;
        }
                
        .recipientActionSpan {
            padding-left: 550px;
        }
        
        .recipientVerificationSpan {
        }
        
        .recipientAddressSpan {
            padding-top: 2px;
            font-weight: normal;
            color: #050505;
            font-size: small;
        }
                
        .recipientValueSpan {
            padding-left: 80px;
            margin-top: -9px;
        }
                
        .recipientEmailValueSpan {
            padding-left: 60px;
            margin-top: -8px;
        }
        
        .ui-widget-overlay {
            background: #666666 50% 50% repeat;
            opacity: .5;
            filter: Alpha(Opacity=50);
        }
        .echo-button {
            padding-right: 5px;
        }
        .apexp .detailList .list td, .apexp .detailList .list th, 
        .apexp .editPage .bPageBlock .detailList .list tr td, 
        .apexp .editPage .bPageBlock .detailList .list tr th {
            border:0 none;
        }
          
        @font-face {
            font-family: AdobeCleanRegular;
            src: url('{!URLFOR($Resource.AdobeFonts,'AdobeClean-Regular.otf')}') format('opentype');
        }
                  
        @font-face {
            font-family: AdobeCleanBold;
            src: url('{!URLFOR($Resource.AdobeFonts,'AdobeClean-Bold.otf')}') format('opentype');
        }
        
        @font-face {
            font-family: SalesforceSansRegular;
            src: url('{!URLFOR($Resource.SalesforceFonts,'SalesforceFonts/SalesforceSans-Regular.woff2')}') format('woff2'),
                 url('{!URLFOR($Resource.SalesforceFonts,'SalesforceFonts/SalesforceSans-Regular.woff')}') format('woff');
        }
                  
        @font-face {
            font-family: SalesforceSansBold;
            src: url('{!URLFOR($Resource.SalesforceFonts,'SalesforceFonts/SalesforceSans-Bold.woff2')}') format('woff2'),
                 url('{!URLFOR($Resource.SalesforceFonts,'SalesforceFonts/SalesforceSans-Bold.woff')}') format('woff');
        }
        
        .adobeGrabIcon {
            background-image: url('{!$Resource.GrabberIcon}');
        }
        
        .adobeTextInput {
            height: 20px;
        }
                
        .adobeCheckboxFieldEditable {
            cursor: hand;
            cursor: pointer;
        }
             
        .adobeToggleFieldEditable {
            cursor: hand;
            cursor: pointer;
        }
        
        .adobeCheckboxField {
            float: left;
            background-color: transparent;
            height: 20px;
            width: 20px;
        }
         
        .adobeCheckboxFieldActive {
            background: url('{!$Resource.CheckboxActiveIcon}') no-repeat;
            background-size: cover;
        }
               
        .adobeCheckboxFieldUnchecked {
            background: url('{!$Resource.CheckboxEmptyIcon}') no-repeat;
            background-size: cover;
        }
        
        .adobeCheckboxFieldChecked {
            background: url('{!$Resource.CheckboxFullIcon}') no-repeat;
            background-size: cover;
        }
        
        .adobeFieldLabelRight {
            position: absolute;
            padding-top: 4px;
            margin-left: 10px;
        }
        
        .adobeFieldLabelLeft {
            padding-right: 4px;
        }        
        
        .documentTitleText {
            padding-left: 20px;
            position: relative;
            padding-top: 2px;
        }

        .adobePrimaryText {
            font-size: 14px;
            font-family: SalesforceSansRegular;
            color: #4B4B4B;
            -moz-opacity: 1.0;
            -khtml-opacity: 1.0;
             opacity: 1.0;
        }
        
        .adobePrimaryBoldText {
            font-size: 14px;
            font-family: SalesforceSansBold;
            color: #4B4B4B;
            -moz-opacity: 1.0;
            -khtml-opacity: 1.0;
             opacity: 1.0;
        }
        
        .adobeLinkText {
            font-size: 14px;
            font-family: SalesforceSansRegular;
            color: #3278BE;
            text-decoration: none;
        }
                
        .echoSignButton {
            background: -webkit-linear-gradient(#3287D2, #3278BE); /* For Safari 5.1 to 6.0 */
            background: -o-linear-gradient(#3287D2, #3278BE); /* For Opera 11.1 to 12.0 */
            background: -moz-linear-gradient(#3287D2, #3278BE); /* For Firefox 3.6 to 15 */
            background: linear-gradient(#3287D2, #3278BE); /* Standard syntax */
            background: -ms-linear-gradient(top,#3287D2 0,#3278BE 100%);
            border: 1px solid #002341;
            filter: alpha(opacity=70);
            width: inherit;
            min-width: 170px;
            height: 38px;
            padding-left: 15px;
            padding-right: 15px;
            padding-bottom: 0px;
            padding-top: 3px;
            margin: 15px 15px 15px 15px;
            color: #ffffff;
            font-size: 15px;
            font-family: SalesforceSansBold;
            text-shadow: 0px 0px #000000;
        }.echoSignButton:hover {
            background: #3287D2;
            cursor: hand;
            cursor: pointer;
        }.echoSignButton:active {
            background: #3278BE;
            -webkit-box-shadow: inset 0 0 4px #000000;
            -moz-box-shadow: inset 0 0 4px #000000;
            box-shadow: inset 0 0 4px #000000;
        }
        .image {
            position:relative;
        }
        
        .textProgressBreak {
            color: #7d7d7d;
            font-size: 22px;
            font-family: SalesforceSansRegular;
            margin-left: 40px;
            margin-right: 40px;
        }
        
        .textProgressInactive {
            color: #7d7d7d;
            font-size: 22px;
            font-family: SalesforceSansRegular;
        }
        
        .textProgressActive {
            color: #444444;
            font-size: 22px;
            font-family: SalesforceSansBold;
        }
        
        .esDialogClass .ui-widget-header {
            background: rgb(124, 197, 234);
            border: 1px solid rgb(124, 197, 234);
        }
        
        .ui-front {
            z-index: 1000;
        }
        
        .bPageBlock .requiredInput .requiredBlock {
            background-color : #3287D2;
        }
        
        body .bPageBlock .pbBody .pbSubheader h3 {
            color: #4b4b4b;
            font-size: 18px;
            font-family: SalesforceSansRegular;
        }
        
        body .bPageBlock .pbTitle h2 {
            color: #4b4b4b;
            font-size: 18px;
            font-family: SalesforceSansRegular;
        }
        
        ul.token-input-selected-role {
            background-color: #fff;
            box-shadow: 0 5px 20px 0 rgba(0, 0, 0, 0.25);
            padding: 4px;
            color: #000;
            border: 1px solid #8c8c8c;
            z-index: 999;
            list-style-type: none;
            height: 33px;
        }
        
        ul.token-input-selected-role li {
            padding: 0;
            padding-right: 4px;
            margin: 0;
            cursor: pointer;
            clear: both;
        }
        
        ul.token-input-list li {
            cursor: default;
        }
        
        div.selection-indicator, div.no-selection-indicator {
            float: left;
            height: 16px;
            width: 16px;
        }
        
        div.toggle-group-container {
            float: left;
            height: 24px;
            max-height: 24px;
            overflow: hidden;
            white-space: nowrap;
        }

        div.toggle-group {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            -o-user-select: none;
            user-select: none;
            background: transparent url('{!$Resource.GreyGradientBottom}') 0px 0px repeat;
            float: left;
            height: 20px;
            border: 1px solid #aeaeae;
            padding: 2px 3px 0;
        }

        div.toggle-group.down {
            background-position: 0px -24px;
            color: #3a85c6;
            background: transparent url('{!$Resource.GreyGradientTop}') 0px 0px repeat; 
        }

        div.toggle-group.right-button {
            border-left: none;
        }
        
        div.toggle-group.left-button {
            border-left: 1px solid #aeaeae;
        }

        div.text {
            float: left;
            padding-left: 3px;
            padding-right: 3px;
            padding-top: 3px;
            font-size: 13px;
            font-family: SalesforceSansRegular;
        }
        
        
        ul.token-input-selected-role {
            background-color: #fff;
            box-shadow: 0 5px 20px 0 rgba(0, 0, 0, 0.25);
            padding: 4px;
            color: #000;
            border: 1px solid #8c8c8c;
            z-index: 999;
            list-style-type: none;
            height: 33px;
        }
        
        div.selection-indicator {
            background: url('{!$Resource.AdobeBullet}') no-repeat;
            float: left;
            height: 16px;
            width: 16px;
        }
        
        div.no-selection-indicator {
            float: left;
            height: 16px;
            width: 16px;
        }
        
        ul.token-input-selected-role li div.icon {
            float: left;
            width: 16px;
            height: 16px;
        }
        
        li.token-input-selected-role-signer div.icon {
            background: url('{!$Resource.echosign_dev1__SignerIcon}') -6px -5px no-repeat;
        }
        
        li.token-input-selected-role-approver div.icon {
            background: url('{!$Resource.echosign_dev1__ApproverIcon}') -6px -5px no-repeat;
        }
        
        ul.token-input-selected-role li span {
            padding-left: 8px;
            float: left;
            cursor: pointer;
            font-family: SalesforceSansRegular;
        }
        
        .requiredExample {
            border-left-color: #3287D2;
        }
    </style>
    
    <apex:outputpanel id="loadingSpinnerSection" style="display: none; width: 100%; height: 100%;">
        <iframe width="100%" height="100%" frameborder="0" src="{!$Page.SendForSignature}"></iframe>
    </apex:outputpanel>    
    
    <apex:outputpanel id="loadingSpinnerRemindSection" style="display: none; width: 100%; height: 100%;">
        <iframe width="100%" height="100%" frameborder="0" src="{!$Page.SendReminder}"></iframe>
    </apex:outputpanel>
    
    <apex:outputpanel id="loadingSpinnerDeleteSection" style="display: none; width: 100%; height: 100%;">
        <iframe width="100%" height="100%" frameborder="0" src="{!$Page.DeleteAgreement}?deleteButton=false"></iframe>
    </apex:outputpanel>
    
    <apex:outputpanel id="loadingSpinnerCancelSection" style="display: none; width: 100%; height: 100%;">
        <iframe width="100%" height="100%" frameborder="0" src="{!$Page.CancelAgreement}"></iframe>
    </apex:outputpanel>  
    
    <apex:outputpanel id="agreementPanel" style="display: none;">
    
    <apex:form id="AgreementFormTitleId">
        <apex:sectionHeader title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.label}" subtitle="{!agreement.Name}"/>
    </apex:form>
    
    <chatter:feedWithFollowers entityId="{!agreement.Id}" rendered="{! !(!ISNULL(cusSettings) && cusSettings.Disable_Agreement_Chatter_Feed__c) }"></chatter:feedWithFollowers>

    <apex:form id="AgreementFormId">
        <apex:variable var="errorMsg" value="{!agreement.echosign_dev1__ErrorMessage__c}" />
        <apex:variable var="agreementStatus" value="{!agreement.echosign_dev1__Status__c}"/>
        <apex:variable var="agreementStatusVisible" value="{!agreement.echosign_dev1__StatusVisible__c}"/>
        <apex:variable var="lastEventId" value="{!agreement.echosign_dev1__LastEventId__c}"/>
        <apex:variable var="isError" value="{! LEN(errorMsg) > 0 }"/>
        <apex:variable var="isSendInProgress" value="{! AND( agreementStatus == 'Send in Progress', NOT(isError) ) }"/>
        <apex:variable var="inPresend" value="{!agreementStatus == 'Pre-Send'}"/>
        <apex:variable var="isApproved" value="{!agreementStatus == 'Approved'}"/>
        <apex:variable var="isSigned" value="{!agreementStatus == 'Signed'}"/>
        <apex:variable var="isFiled" value="{! isApproved || isSigned }"/>
        <apex:variable var="isAborted" value="{!agreementStatus == 'Aborted'}"/>
        <apex:variable var="inProgress" value="{!agreementStatus == 'Out for Signature' || agreementStatus == 'Out for Approval' || agreementStatus == 'Waiting for Counter-Signature' || agreementStatus == 'Waiting for Counter-Approval' || agreementStatus == 'WidgetWaitingForVerification' || agreementStatus == 'WIDGET_WAITING_FOR_VERIFICATION' || isSendInProgress }" />
        <apex:variable var="hasBeenSent" value="{! agreementStatus != 'Draft' && ( NOT( AND( agreementStatus == 'Send in Progress', isError ) ) ) }" />
        <apex:variable var="notYetSent" value="{!NOT(hasBeenSent)}" />
        <apex:variable var="hasBeenSubmitted" value="{! agreementStatus != 'Draft' && ( NOT( AND( agreementStatus == 'Send in Progress', isError ) ) ) }" />
        <apex:variable var="notYetSubmitted" value="{!NOT(hasBeenSubmitted)}" />
        <apex:variable var="applicableForCancel" value="{!inProgress}" />
        <apex:variable var="applicableForUpdate" value="{!OR(inProgress, inPresend)}" />
        <apex:variable var="displayPasswordInput" value="{!notYetSent && ( ( agreement.echosign_dev1__External_Signers_Verification_Method__c = 'Password to sign agreement' ) || ( agreement.echosign_dev1__Internal_Signers_Verification_Method__c = 'Password to sign agreement' ) || agreement.echosign_dev1__PasswordProtectPDF__c)}" id="passwordVar"/>
        <apex:variable var="isAgreementSaved" value="{! agreement.Id != NULL }"/>
        <apex:variable var="isDraftedProgress" value="{! ( agreementStatus == 'Draft' || agreementStatus == 'Pre-Send' ) && isAgreementSaved }"/>
        <apex:variable var="isInProgressProgress" value="{! agreementStatus == 'Out for Signature' || agreementStatus == 'Waiting for Counter-Signature' || agreementStatus == 'Out for Approval' || agreementStatus == 'Waiting for Counter-Approval' || isSendInProgress }"/> 
        <apex:variable var="isCompletedProgress" value="{! isSigned || isApproved }"/>
        <apex:variable var="isCanceledProgress" value="{! agreementStatus == 'Cancelled / Declined' || isAborted }"/>
        <apex:variable var="isExpiredProgress" value="{! agreementStatus == 'Expired' }"/>
        
        <apex:variable var="isWindowActionWindowType" value="{! (!ISNULL(cusSettings) && cusSettings.Action_Window_Type__c == 'Window') }" />
        <apex:variable var="isFrameActionWindowType" value="{! (!ISNULL(cusSettings) && cusSettings.Action_Window_Type__c == 'Frame') }" />
        
        <apex:variable var="isDisableCc" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Cc__c) }" />
        <apex:variable var="isDisableAddRecipient" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Add_Recipient__c) }" />
        <apex:variable var="isDisableDeleteRecipient" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Delete_Recipient__c) }" />
        <apex:variable var="isDisableSortRecipients" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sort_Recipients__c) }" />
        <apex:variable var="isRenderDeleteRecipient" value="{! AND( notYetSent, NOT(isDisableDeleteRecipient) ) }" />
        <apex:variable var="isDisableSenderSigns" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sender_Signs__c) }" />
        <apex:variable var="isDisableSignatureType" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Signature_Type__c) }" />
        <apex:variable var="isDisableAccountLookup" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Account_Lookup__c) }" />
        <apex:variable var="isDisableOpportunityLookup" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Opportunity_Lookup__c) }" />
        <apex:variable var="isDisableSignPassword" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sign_Password__c) }" />
        <apex:variable var="isDisableViewPassword" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_View_Password__c) }" />
        <apex:variable var="isDisableSignExpiration" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sign_Expiration__c) }" />
        <apex:variable var="isDisableSignReminder" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sign_Reminder__c) }" />
        <apex:variable var="isDisablePreviewPosition" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Preview_Position__c) }" />
        <apex:variable var="isDisableKba" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Knowledge_Based_Authentication__c) }" />
        <apex:variable var="isDisableWebIdentity" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Web_Identity__c) }" />
        <apex:variable var="isDisableReplaceSigner" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Replace_Signer__c) }" />
        <apex:variable var="isEnableSeparateSignerIdentity" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Separate_Signer_Identity_Methods__c) }" />
        <apex:variable var="isEnableApproverRecipientRole" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Recipient_Approver_Role__c) }" />
        <apex:variable var="isEnableLayersSection" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Layers_Section__c) }" />
        <apex:variable var="isDisableLayerAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Layer_Attachments__c) }" />
        <apex:variable var="isEnableSignatureFlow" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Recipient_Signing_Order_Field__c) }" />
        <apex:variable var="isEnableSenderSignsOnly" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Sender_Signs_Only__c) }" />
        <apex:variable var="isEnablePostSignOptions" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Post_Sign_Options__c) }" />
        
        <apex:variable var="isDisableEditAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Edit_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableDeleteAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Delete_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableUploadAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Upload_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableAttachAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Attach_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableContentAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Content_Agreement_Attachments__c) }" />
        <apex:variable var="isEnableLibraryAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Library_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableViewAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_View_Agreement_Attachments__c) }" />
        <apex:variable var="isDisableSortAttachments" value="{! (!ISNULL(cusSettings) && cusSettings.Disable_Sort_Attachments__c) }" />
        
        <apex:variable var="isReadOnlyRecipient" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Recipient__c) }" />
        <apex:variable var="isReadOnlySenderSigns" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Sender_Signs__c) }" />
        <apex:variable var="isReadOnlyCc" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Cc__c) }" />
        <apex:variable var="isReadOnlyHostedSigning" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Hosted_Signing__c) }" />
        <apex:variable var="isReadOnlyAgreementName" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Agreement_Name__c) }" />
        <apex:variable var="isReadOnlyMessage" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Message__c) }" />
        <apex:variable var="isReadOnlyLanguage" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Language__c) }" />
        <apex:variable var="isReadOnlySignatureType" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Signature_Type__c) }" />
        <apex:variable var="isReadOnlyAccount" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Account__c) }" />
        <apex:variable var="isReadOnlyOpportunity" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Opportunity__c) }" />
        <apex:variable var="isReadOnlySignExpiration" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Sign_Expiration__c) }" />
        <apex:variable var="isReadOnlySignReminder" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Sign_Reminder__c) }" />
        <apex:variable var="isReadOnlySignPreviewPosition" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Preview_Position__c) }" />
        <apex:variable var="isReadOnlySecurityOptions" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Security_Options__c) }" />
        <apex:variable var="isReadOnlyFieldSet" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Field_Set__c) }" />
        <apex:variable var="isReadOnlySignatureFlow" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Recipient_Signing_Order_Field__c) }" />
        <apex:variable var="isReadOnlySenderSignsOnly" value="{! (!ISNULL(cusSettings) && false) }" />
        <apex:variable var="isReadOnlyPostSignOptions" value="{! (!ISNULL(cusSettings) && cusSettings.Read_Only_Post_Sign_Options__c) }" />
        
        <apex:variable var="isDisableAgreementReviewLogo" value="{! (!ISNULL(cusToolbarSettings) && cusToolbarSettings.Disable_Agreement_Review_Logo__c) }" />
        <apex:variable var="isEnableRecipientSecurityOptions" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Recipient_Security_Options__c) }" />
        <apex:variable var="isEnablePhoneAuthentication" value="{! (!ISNULL(cusSettings) && cusSettings.Enable_Phone_Authentication__c) }" />
        
        <apex:variable var="isEnableOnloadActionSend" value="{! (notYetSent && cusToolbarSettings.Send_Agreement__c) }" />
        <apex:variable var="isEnableOnloadActionRemind" value="{! (inProgress && cusToolbarSettings.Send_Reminder__c) }" />
        <apex:variable var="isEnableOnloadActionView" value="{! (hasBeenSent && cusToolbarSettings.View_Agreement__c) }" />
        <apex:variable var="isEnableOnloadActionDelete" value="{! (hasBeenSent && cusToolbarSettings.Delete_Agreement__c) }" />
        <apex:variable var="isEnableOnloadActionCancel" value="{! (applicableForCancel && cusToolbarSettings.Cancel_Agreement__c) }" />
        <apex:variable var="isEnableOnloadActionUpdate" value="{! (applicableForUpdate && cusToolbarSettings.Update_Status__c) }" />
        
        <!-- <apex:variable var="isStandardAgreementType" value="{! ISNULL( agreement.Agreement_Type__c ) || agreement.Agreement_Type__c == 'Standard' }" />
        <apex:variable var="isMegaSignAgreementType" value="{! agreement.Agreement_Type__c == 'MegaSign' }" />
        <apex:variable var="isMegaSignChildAgreement" value="{! agreement.Parent_Agreement_ID__c != NULL }" /> -->
        
        <apex:actionFunction oncomplete="initSortable();" action="{!onReorderRecipients}" name="reorderRecipients" rerender="errorPanel,errorPanelBottom,recipientsListSection">
            <apex:param name="selectedRecipientIndex" assignTo="{!selectedRecipientIndex}" value="selectedRecipientIndex" />
        </apex:actionFunction> 
        <apex:actionFunction oncomplete="initSortable();" action="{!onReorderAttachments}" name="reorderAttachments" rerender="errorPanel,errorPanelBottom,attachmentSection">
            <apex:param name="selectedAttachmentIndex" assignTo="{!selectedAttachmentIndex}" value="selectedAttachmentIndex" />
        </apex:actionFunction>   
        <apex:actionFunction action="{!onToggleSenderSigns}" name="toggleSenderSigns" oncomplete="initSenderSignsListeners(); initOrderListeners('{!JSENCODE(agreement.echosign_dev1__SignatureOrder__c)}');" rerender="recDetailPanel" />
        <apex:actionFunction action="{!onToggleHosted}" name="toggleHosted" oncomplete="initHostedListeners();" rerender="hostedPanel" />
        <apex:actionFunction action="{!onToggleSenderSignsOnly}" name="toggleSenderSignsOnly" oncomplete="initSenderSignsOnlyListeners(); initListeners();" rerender="detailPageBlock" />
        <apex:actionFunction action="{!onToggleAuthoring}" name="toggleAuthoring" oncomplete="initAuthoringListeners();" rerender="authoringPanel" />
        <apex:actionFunction action="{!onToggleReminder}" name="toggleReminder" oncomplete="initReminderListeners();" rerender="remindRecipientPanel" />
        <apex:actionFunction action="{!onToggleFlow}" name="toggleFlow" oncomplete="initSenderSignsListeners(); initOrderListeners('{!JSENCODE(agreement.echosign_dev1__SignatureOrder__c)}');" rerender="recDetailPanel"/>
        <apex:actionFunction action="{!onToggleOrder}" name="toggleOrder" oncomplete="return false;" />
        <apex:actionFunction oncomplete="initSortable();" action="{!onReorderAttachments}" name="reorderAttachments" rerender="errorPanel,errorPanelBottom,attachmentSection">
            <apex:param name="selectedAttachmentIndex" assignTo="{!selectedAttachmentIndex}" value="selectedAttachmentIndex" />
        </apex:actionFunction>
        
        <apex:actionFunction action="{!onSetRecipientRoleSigner}" name="setRecipientRoleSigner" rerender="errorPanel,errorPanelBottom,recipientRoleSelectorPanel">
            <apex:param name="selectedRecipientIndex" assignTo="{!selectedRecipientIndex}" value="selectedRecipientIndex" />
        </apex:actionFunction>
        <apex:actionFunction action="{!onSetRecipientRoleApprover}" name="setRecipientRoleApprover" rerender="errorPanel,errorPanelBottom,recipientRoleSelectorPanel">
            <apex:param name="selectedRecipientIndex" assignTo="{!selectedRecipientIndex}" value="selectedRecipientIndex" />
        </apex:actionFunction>
        
        <apex:outputPanel rendered="{!AND(echosign_dev1__SIGN_Agreement__c.echosign_dev1__ReturnURL__c!='',echosign_dev1__SIGN_Agreement__c.echosign_dev1__ReturnURL_Text__c!='')}">
            <apex:commandLink id="ReturnURLLink" action="{!getReturnUrl}">
                {!echosign_dev1__SIGN_Agreement__c.echosign_dev1__ReturnURL_Text__c}
            </apex:commandLink>
        </apex:outputPanel>
        
        <apex:outputpanel id="logoutPanel" rendered="{! NOT( agreement.Enable_Hosted_Signing__c ) }">
            <iframe height="0" width="0" src="https://secure.echosign.com/public/logout" style="visibility:hidden;display:none"></iframe>
        </apex:outputpanel>
        
        <apex:pageBlock title="{!$Label.echosign_dev1__actions_section_header}" id="actionPageBlock">
            <apex:pageBlockSection id="buttonsSection" columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputPanel id="errorPanel">
                        <apex:outputPanel style="text-align: left;" styleClass="errorMsg" layout="block" rendered="{!pageHaserror}">
                            <strong>{!$Label.echosign_dev1__correct_error_notice} </strong>
                            <script>
                                if (popup && !popup.closed) { popup.close(); }
                                if( isIosMobile ) { hideSpinner(); }
                                salesforceJQuery('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementButtonImage}').show();
                                salesforceJQuery('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementButtonDisabled}').hide();                                            
                            </script>                                 
                            <apex:messages styleClass="pbError" style="text-align: left;" />   
                        </apex:outputPanel>            
                        <apex:outputPanel rendered="{!!pageHaserror}">
                            <apex:pagemessages />
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>  
                <apex:pageBlockSectionItem rendered="{!LEN(errorMsg) > 0}">
                    <apex:outputText >
                        <apex:image url="{!$Resource.echosign_dev1__ErrorIcon}"/>
                        <apex:outputPanel styleClass="errorMsg"><b>{!errorMsg}</b></apex:outputPanel>
                    </apex:outputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{! !isDisableAgreementReviewLogo }">
                    <apex:outputPanel style="float: right;">
                        <a href="https://appexchange.salesforce.com/listingDetail?listingId=a0N300000016ZmCEAU&tab=r" target="_blank"><apex:image url="{!$Resource.echosign_dev1__AppReviewIcon}" style="margin-bottom: 5px;"/></a>
                        <apex:outputPanel >&nbsp;<a target="_blank" style="vertical-align: super; color: #3278BE;" class="adobeLinkText" href="https://appexchange.salesforce.com/listingDetail?listingId=a0N300000016ZmCEAU&tab=r">{!$Label.EchoSign_Review_Label}</a></apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>       
                <apex:pageBlockSectionItem rendered="{! isDraftedProgress || isInProgressProgress || isCompletedProgress || isCanceledProgress || isExpiredProgress }">
                    <apex:outputPanel layout="block" styleClass="image">
                        <apex:outputPanel layout="span" styleClass="{! IF( isDraftedProgress, 'textProgressActive', 'textProgressInactive' ) }">{!$Label.echosign_dev1__drafted_progress_status}</apex:outputPanel>
                        <apex:outputPanel layout="span" styleClass="textProgressBreak"><apex:image value="{!$Resource.echosign_dev1__AdobeNextArrow}" /></apex:outputPanel>
                        <apex:outputPanel layout="span" styleClass="{! IF( isInProgressProgress, 'textProgressActive', 'textProgressInactive' ) }">{!$Label.echosign_dev1__inprogress_progress_status}</apex:outputPanel>
                        <apex:outputPanel layout="span" styleClass="textProgressBreak"><apex:image value="{!$Resource.echosign_dev1__AdobeNextArrow}" /></apex:outputPanel>
                        <apex:outputPanel layout="span" styleClass="{! IF( isCompletedProgress || isCanceledProgress || isExpiredProgress, 'textProgressActive', 'textProgressInactive' ) }">{! IF( isCompletedProgress, $Label.Completed_Progress_Status, IF( isCanceledProgress, $Label.Canceled_Progress_Status, IF( isExpiredProgress, $Label.Expired_Progress_Status, $Label.Completed_Progress_Status ) ) ) }</apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{! hasBeenSent || inPresend || isSendInProgress }">
                    <apex:outputText >
                        <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__agreement_status_label}"/>
                        <apex:outputText styleClass="adobePrimaryBoldText">:</apex:outputText>
                        <apex:outputText styleClass="adobePrimaryText" style="margin-left: 10px;" value="{!agreementStatusVisible}"/>
                        <!-- uncomment below and remove above to fix 36744, once Amy approved -->
                        <!-- <apex:outputField value="{!agreement.echosign_dev1__Status__c}" /> -->
                    </apex:outputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="buttons">    
                    <apex:outputPanel >
                        <table width="100%">
                            <tr>
                                <td align="left"> 
                                    <apex:commandButton id="sendAgreementLink" styleClass="echoSignButton" value="{!$Label.echosign_dev1__send_button_label}" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" action="{!sendForSignature}" onclick="pageHasError='false'; if( isIosMobile ) { showSpinner(); } else { myShow('{!$Page.echosign_dev1__SendForSignature}'); }" oncomplete="onComplete();" rerender="errorPanel,errorPanelBottom,agreementDetailsOP,AgreementOptionsSection,recipientsSection,myPanel2" rendered="{!IF( OR(notYetSent,inPresend) && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Send_Agreement__c),'true','false')}"/>
                                    <apex:commandButton id="saveAgreementLink" oncomplete="hideInlineError(); initListeners();" onclick="if (isClicked) { return false; } isClicked = true;" value="{!$Label.echosign_dev1__save_agreement_button_label}" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" action="{!saveWithoutSending}" rendered="{!IF(notYetSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Save_Agreement__c),'true','false')}" rerender="AgreementFormId,attachmentSection"/>
                                    
                                    <apex:actionFunction name="doSendReminder" action="{!sendReminder}" oncomplete="if( isIosMobile ) { hideReminderSpinner(); reloadPage(); } else { onFinish(); }" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theActionPoller,myPanel2"/>
                                    
                                    <apex:actionFunction name="doCancelAgreement" action="{!cancelAgreement}" oncomplete="if(pageHasError=='false'){ setTimeout('hideCancelSpinner(); reloadPage();', 2500); }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theActionPoller,myPanel2">
                                        <apex:param name="cancelReason" assignTo="{!cancelReason}" value="reason" />
                                        <apex:param name="notifySigner" assignTo="{!notifySigner}" value="notify" />
                                    </apex:actionFunction>
                                    
                                    <apex:actionFunction name="doDeleteAgreement" action="{!removeAgreement}" oncomplete="if(pageHasError=='false'){ setTimeout('hideCancelSpinner(); reloadPage();', 2500); }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theActionPoller,myPanel2">
                                        <apex:param name="cancelReason" assignTo="{!cancelReason}" value="reason" />
                                        <apex:param name="notifySigner" assignTo="{!notifySigner}" value="notify" />
                                    </apex:actionFunction>
                                     
                                    <apex:actionFunction name="sendAgreement" action="{!sendAgreement}" oncomplete="if( (pageHasError == 'false') && ( ( !{!agreement.echosign_dev1__Sender_Signs_Only__c} || !{!agreement.echosign_dev1__Enable_Hosted_Signing__c} || ( {!agreement.echosign_dev1__Enable_Hosted_Signing__c} && {!agreement.echosign_dev1__Authoring__c} ) || ( {!agreement.echosign_dev1__Sender_Signs_Only__c} && {!agreement.echosign_dev1__Authoring__c} ) ) ) ) { sendEnabled = false; if( isIosMobile ) { hideSpinner(); myShow('{!agreementSigningUrl}'); } else { myShow('{!agreementSigningUrl}'); } showDialogCloseButton(); } else if(pageHasError=='false'){ }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theActionPoller,myPanel2"/>
                                    <apex:actionFunction name="doUnsetOnLoadActionField" action="{!wipeOnloadActionAndUpdate}" oncomplete="return false;"/>
                                    
                                    <apex:outputpanel id="theActionPoller">
                                        <apex:outputpanel rendered="{!startActionPoller}">
                                            <apex:actionPoller action="{!retrieveSigningUrl}" oncomplete="if(pageHasError=='false'){sendEnabled = false; myShow('{!agreementSigningUrl}'); showDialogCloseButton(); }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,floatingDiv,theSigningPanel,theStatusPanel" interval="5" />
                                        </apex:outputpanel>
                                    </apex:outputpanel>
                                    <apex:commandButton id="updateAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__update_agreement_button_label}" rendered="{!IF(applicableForUpdate && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Update_Status__c),'true','false')}" onclick="updateStatus(); return false;" />                
                                    <apex:commandButton id="remindAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__remind_agreement_button_label}" rendered="{!IF(inProgress && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Send_Reminder__c),'true','false')}" onclick="sendReminder(); return false;" /> 
                                    <apex:commandButton id="viewAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__view_agreement_button_label}" rendered="{!IF(hasBeenSent && NOT(isSendInProgress) && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__View_Agreement__c),'true','false')}" action="{!getViewAgreementUrl}" oncomplete="if( !{!pageHasError} ) { viewAgreement(); } return false;" rerender="errorPanel,errorPanelBottom,AgreementOptionsSection"/>
                                </td>
                                <td align="right">
                                    <apex:commandButton id="deleteAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__delete_agreement_button_label}" rendered="{!IF(hasBeenSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Delete_Agreement__c),'true','false')}" onclick="showRemoveAgreementDialog(); return false;" />
                                    <apex:commandButton id="cancelAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__cancel_agreement_button_label}" rendered="{!IF(applicableForCancel && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Cancel_Agreement__c),'true','false')}" onclick="showCancelAgreementDialog(); return false;" />
                                    <apex:commandButton id="cancelAgreementLink" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__cancel_button_label}" action="{!cancelDraft}" rendered="{!IF(notYetSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Cancel_Draft__c),'true','false')}"/>
                                </td>
                            </tr>
                        </table>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock>
         
        <apex:pageBlock mode="edit" id="detailPageBlock">
            <apex:pageBlockSection id="recipientsSection" title="{!$Label.echosign_dev1__recipients_section_header}" columns="1">
                
                <!-- <apex:outputPanel id="recipientsMegaSignSection" rendered="{!isMegaSignAgreementType}" style="">
                    <apex:selectList id="megaSignReportTypeSelect" value="{! selectedReportType }" size="1" >
                        <apex:selectOptions value="{!reportTypeOptions}"/>
                    </apex:selectList>
                    <apex:selectList id="megaSignReportsSelect" value="{! selectedReportId }" size="1" >
                        <apex:selectOptions value="{!reportOptions}"/>
                        <apex:actionSupport action="{! onSelectMegaSignReport }" event="onchange" rerender="recipientsMegaSignSection" />
                    </apex:selectList>
                    <apex:selectList id="megaSignReportFieldSelect" value="{! selectedReportFieldId }" size="1" >
                        <apex:selectOptions value="{!reportFieldOptions}"/>
                    </apex:selectList>
                    <table width="100%" style="margin-bottom: 5px;" class="list" id="reportRecipientsTable">
                        <thead class="dr-table-thead">
                            <tr class="headerRow">
                                <th style="width: 5%; display: {! IF( notYetSent, 'block', 'none' ) };" class="headerRow">{!$Label.Recipients_Action_Column_Label}</th>
                                <th style="width: 15%;" class="headerRow">{!$Label.echosign_dev1__recipients_type_column_label}</th>
                                <th style="width: 35.5%;" class="headerRow">{!$ObjectType.SIGN_Recipients__c.fields.Recipients_Report_ID__c.label}</th>
                                <th style="width: 35.5%;" class="headerRow">{!$ObjectType.SIGN_Recipients__c.fields.Recipients_Report_Field_ID__c.label}</th>
                            </tr>
                        </thead>
                    </table>
                    <apex:repeat value="{!recipients}" var="recipientWrapper" id="agreementRecipientsItems">
                        <apex:commandButton action="{!delRecipient}" title="{!$Label.echosign_dev1__delete_recipient_tooltip}" image="{!$Resource.echosign_dev1__ActionDelete}" rerender="recipientsMegaSignSection" rendered="{!isRenderDeleteRecipient}" status="DeletingStatus" style="background:transparent;border-width:0px;margin-right: 5%;">
                            <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}"/>
                        </apex:commandButton>
                        <apex:selectList id="megaSignReportTypeSelect" rendered="{! notYetSent }" value="{! recipientWrapper.recipient.Recipient_Type__c }" size="1" style="width: 15%;" >
                            <apex:selectOptions value="{!recipientTypes}"/>
                            <apex:actionSupport event="onchange" rerender="agreementRecipientPanel" />
                        </apex:selectList>
                        <apex:outputField value="{!recipientWrapper.recipient.echosign_dev1__Recipient_Type__c}" rendered="{! hasBeenSent }" style="width: 15%;" />
                        <apex:selectList id="megaSignReportsSelect" rendered="{! notYetSent }" value="{! recipientWrapper.recipient.Recipients_Report_ID__c }" size="1" style="width: 35%;" >
                            <apex:selectOptions value="{!reportOptions}"/>
                            <apex:actionSupport action="{! onSelectRecipientReport }" event="onchange" rerender="recipientsMegaSignSection">
                                <apex:param assignTo="{!selectedRecipientIndex}" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" name="selectedRecipientIndex"/>
                            </apex:actionSupport>
                        </apex:selectList>
                        <apex:outputPanel rendered="{! hasBeenSent }" style="width: 35%;">
                            <a href="/{!recipientWrapper.recipient.Recipients_Report_ID__c}">{!recipientWrapper.recipientsReportName}</a>
                        </apex:outputPanel>
                        <apex:selectList id="megaSignReportFieldSelect" rendered="{! notYetSent }" value="{! recipientWrapper.recipient.Recipients_Report_Field_ID__c }" size="1" style="width: 35%;" >
                            <apex:selectOptions value="{! recipientWrapper.reportFieldOptions }"/>
                        </apex:selectList>
                        <apex:outputPanel rendered="{! hasBeenSent }" style="width: 35%;">
                            {!recipientWrapper.recipientsReportFieldName}
                        </apex:outputPanel>
                    </apex:repeat>
                    <br/>
                    <br/>
                </apex:outputPanel> -->
                
                <apex:outputPanel id="recipientsListSection" >
                    <script>
                        if( typeof(alignRecipientUserLookup) === typeof(Function) ) {
                            alignRecipientUserLookup();
                        }
                    </script>
                    <apex:actionFunction name="doReplaceRecipientSubmit" action="{!replaceRecipientSubmit}" oncomplete="hideReplaceSignerDialog();" rerender="errorPanel,errorPanelBottom,recipientsListSection">
                        <apex:param value="message" assignTo="{!replaceMessage}" name="replaceMessage"/>
                    </apex:actionFunction>
                    
                    <div id="recipientRoleSelectorDialog" class="token-input-selected-role" style="display: none; position: absolute; top: 215px; left: 191px; z-index: 999;">
                        <ul class="token-input-selected-role" style="width: 110%;">
                            <li id="signerOptionElement" name="signer" class="token-input-selected-role-signer">
                                <div id="signerSelectorElement"></div>
                                <div class="icon"></div>
                                <span class="adobePrimaryText">{!signerRecipientRoleLabel}</span>
                            </li>
                            <li id="approverOptionElement" name="approver" class="token-input-selected-role-approver">
                                <div id="approverSelectorElement"></div>
                                <div class="icon"></div>
                                <span class="adobePrimaryText">{!approverRecipientRoleLabel}</span>
                            </li>
                        </ul>
                    </div>
                    <apex:outputPanel >
                        <ul id="sortableHeader" style="width: 1050px; float: left; list-style: none;">
                            <li>
                                <apex:outputPanel layout="inline" style="margin-left: 1px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__recipients_type_column_label}" />
                                </apex:outputPanel>
                                <apex:outputPanel layout="inline" style="margin-left: 110px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__recipients_recipient_column_label}" />
                                </apex:outputPanel>
                                <apex:outputPanel layout="inline" style="margin-left: 200px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__recipients_email_column_label}" />
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!isEnableRecipientSecurityOptions}" layout="inline" style="margin-left: 140px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__recipients_verification_column_label}" />
                                </apex:outputPanel>
                            </li>
                        </ul>
                        <ul id="sortable" style="width: 1240px; float: left;">
                            <apex:repeat value="{!recipients}" var="recipientWrapper" id="recipientItems">
                                <li id="recipientRowItem{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" class="ui-state-default">                                                
                                    <apex:outputPanel rendered="{! AND( NOT(hasBeenSent), NOT(isDisableSortRecipients) ) }" style="background-position: inherit; background-image: url('{!$Resource.echosign_dev1__GrabberIcon}'); padding-top: 12px;" styleClass="ui-icon ui-icon-arrowthick-2-n-s adobeGrabIcon" />                                      
                                                <apex:outputPanel id="recipientStatusPanel" layout="inline" style="padding-top: 5px;" rendered="{! NOT(agreement.Sender_Signs_Only__c) }">                              
                                                    <apex:image value="{!$Resource.echosign_dev1__RecipientStatusWaiting}" title="{!$Label.echosign_dev1__recipient_waiting_tooltip}" rendered="{! ( recipientWrapper.recipient.Status__c = 'Waiting for Signature' || recipientWrapper.recipient.Status__c = 'Waiting for Approval' )  && !recipientWrapper.isReplaced }" /> 
                                                    <apex:image value="{!$Resource.echosign_dev1__RecipientStatusCompleted}" title="{!$Label.echosign_dev1__recipient_completed_tooltip}" rendered="{! ( recipientWrapper.recipient.Status__c = 'Signed' || recipientWrapper.recipient.Status__c = 'Approved' ) && !recipientWrapper.isReplaced }" />  
                                                    <apex:image value="{!$Resource.echosign_dev1__RecipientStatusDeclined}" title="{!$Label.echosign_dev1__recipient_declined_tooltip}" rendered="{! ( recipientWrapper.recipient.Status__c = 'Declined' ) && !recipientWrapper.isReplaced }" />
                                                </apex:outputPanel>
                                                <apex:outputPanel id="recipientTypeSection" layout="inline" style="padding-left: 20px; padding-top: 4px;">
                                                    <apex:selectList id="recipientType" value="{!recipientWrapper.recipient.echosign_dev1__Recipient_Type__c}" size="1" disabled="{! isReadOnlyRecipient || ( hasBeenSent && !recipientWrapper.isReplaced ) }">
                                                        <apex:selectOptions value="{!recipientTypes}"/>
                                                            <apex:actionSupport oncomplete="initSortable();" event="onchange" action="{!onRecipientTypeChange}" rerender="recipientsListSection">
                                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" />
                                                            </apex:actionSupport>
                                                    </apex:selectList>
                                                </apex:outputPanel>         
                                                <apex:outputPanel id="recipientValueSection" layout="inline" style="margin-left: 110px; padding-top: 11px;">
                                                    <apex:outputPanel id="recipientRoleSelectorPanel" onclick="if( {!hasBeenSent} ) { return false; } showRecipientRolePicker({!recipientWrapper.recipient.echosign_dev1__Order_Number__c}, '{!recipientWrapper.recipient.echosign_dev1__Recipient_Role__c}');" style="z-index: 300; margin-top: -9px; margin-left: -3px;" layout="inline" styleClass="recipientRoleValueSpan" rendered="{! isEnableApproverRecipientRole && !recipientWrapper.isReplaced && NOT(agreement.Sender_Signs_Only__c) }">
                                                        <apex:image id="signerIconElement" style="margin-right: 0px;" value="{!$Resource.echosign_dev1__SignerIcon}" title="{!signerRecipientRoleLabel}" rendered="{! recipientWrapper.recipient.Recipient_Role__c = 'Signer' }" /> 
                                                        <apex:image id="approverIconElement" style="margin-right: 0px;" value="{!$Resource.echosign_dev1__ApproverIcon}" title="{!approverRecipientRoleLabel}" rendered="{! recipientWrapper.recipient.Recipient_Role__c = 'Approver' }" /> 
                                                        <apex:image value="{!$Resource.echosign_dev1__DropDownArrowIcon}" style="position: absolute; padding-top: 5px;" rendered="{! notYetSent && !isReadOnlyRecipient }" />                                              
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="inline" styleClass="recipientValueSpan">
                                                        <apex:inputField id="contact" styleClass="adobePrimaryText" onkeypress="return noenter(event);" value="{!recipientWrapper.recipient.echosign_dev1__Contact__c}"  rendered="{!AND(( notYetSent || recipientWrapper.isReplaced ),recipientWrapper.recipient.Recipient_Type__c == 'Contact',!isReadOnlyRecipient) }" >
                                                            <apex:actionSupport oncomplete="initSortable(); hideInlineError();" status="populatingRecipientStatus" event="onchange" focus="recipientsListSection" action="{!updateEmail_FaxAddress}" rerender="errorPanel,errorPanelBottom,recipientsListSection,recipientPhonePanel">
                                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" />
                                                            </apex:actionSupport>                                      
                                                        </apex:inputField>
                                                        <apex:outputPanel layout="inline" style="width: 200px;">
                                                            <apex:commandLink styleClass="adobeLinkText" style="color: #3278BE;" onclick="window.open('/{!recipientWrapper.recipient.echosign_dev1__Contact__c}'); return false;" value="{!recipientWrapper.recipient.Contact__r.Name}" rendered="{! ( AND(hasBeenSent,recipientWrapper.recipient.Recipient_Type__c == 'Contact') || isReadOnlyRecipient ) && !recipientWrapper.isReplaced }" />
                                                        </apex:outputPanel>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="inline" styleClass="recipientValueSpan">
                                                        <apex:inputField id="lead" styleClass="adobePrimaryText" onkeypress="return noenter(event);" value="{!recipientWrapper.recipient.echosign_dev1__Lead__c}" rendered="{!AND(( notYetSent || recipientWrapper.isReplaced ),recipientWrapper.recipient.Recipient_Type__c == 'Lead',!isReadOnlyRecipient) }">
                                                            <apex:actionSupport oncomplete="initSortable(); hideInlineError();" status="populatingRecipientStatus" event="onchange" focus="recipientsListSection" action="{!updateEmail_FaxAddress}" rerender="errorPanel,errorPanelBottom,recipientsListSection,recipientPhonePanel">
                                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" />
                                                            </apex:actionSupport>                                          
                                                        </apex:inputField>
                                                        <apex:outputPanel layout="inline" style="width: 200px;">
                                                            <apex:commandLink styleClass="adobeLinkText" style="color: #3278BE;" onclick="window.open('/{!recipientWrapper.recipient.echosign_dev1__Lead__c}'); return false;" value="{!recipientWrapper.recipient.Lead__r.Name}" rendered="{! ( AND(hasBeenSent,recipientWrapper.recipient.Recipient_Type__c == 'Lead') || isReadOnlyRecipient ) && !recipientWrapper.isReplaced }" />
                                                        </apex:outputPanel>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="inline" styleClass="recipientValueSpan">
                                                        <apex:inputField id="userRecipientInputField" styleClass="adobePrimaryText" onkeypress="return noenter(event);" value="{!recipientWrapper.recipient.echosign_dev1__User__c}" rendered="{!AND(( notYetSent || recipientWrapper.isReplaced ),recipientWrapper.recipient.echosign_dev1__Recipient_Type__c == 'User',!isReadOnlyRecipient )}">
                                                            <apex:actionSupport oncomplete="initSortable(); hideInlineError();" status="populatingRecipientStatus" event="onchange" focus="recipientsListSection" action="{!updateEmail_FaxAddress}" rerender="errorPanel,errorPanelBottom,recipientsListSection,recipientPhonePanel">
                                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" />
                                                            </apex:actionSupport>                                         
                                                        </apex:inputField>
                                                        <apex:outputPanel layout="inline" style="width: 200px;">
                                                            <apex:commandLink styleClass="adobeLinkText" style="color: #3278BE;" onclick="window.open('/{!recipientWrapper.recipient.echosign_dev1__User__c}'); return false;" value="{!recipientWrapper.recipient.User__r.Name}" rendered="{! ( AND(hasBeenSent,recipientWrapper.recipient.Recipient_Type__c == 'User') || isReadOnlyRecipient ) && !recipientWrapper.isReplaced }" />
                                                        </apex:outputPanel>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="inline" styleClass="recipientEmailValueSpan">
                                                        <apex:inputField id="email" styleClass="adobePrimaryText" onkeypress="return noenter(event);" value="{!recipientWrapper.recipient.echosign_dev1__Email_Address__c}" rendered="{!AND(( notYetSent || recipientWrapper.isReplaced ), recipientWrapper.recipient.Recipient_Type__c == 'Email',!isReadOnlyRecipient) }">
                                                            <apex:actionSupport status="populatingRecipientStatus" event="onchange" focus="recipientsListSection" action="{!updateEmail_FaxAddress}" rerender="errorPanel,errorPanelBottom,recipientsListSection">
                                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" />
                                                            </apex:actionSupport>
                                                        </apex:inputField>
                                                        <apex:outputText style="margin-top: 5px; padding-left: 5px;" styleClass="adobePrimaryText" value="{!recipientWrapper.recipient.echosign_dev1__Email_Address__c}" rendered="{! ( AND(hasBeenSent, recipientWrapper.recipient.Recipient_Type__c == 'Email') || isReadOnlyRecipient ) && !recipientWrapper.isReplaced }" />
                                                    </apex:outputPanel>
                                                </apex:outputPanel>
                                                    <apex:outputPanel id="replaceRecipientPanel" layout="inline" style="margin-left: 350px;" rendered="{! NOT(agreement.Sender_Signs_Only__c) }">
                                                        <apex:commandButton immediate="true" action="{!replaceRecipient}" title="{!$Label.echosign_dev1__replace_recipient_tooltip}" image="{!$Resource.echosign_dev1__ActionReplace}" rerender="recipientValueSection,replaceRecipientPanel,recipientTypeSection,recipientStatusPanel" rendered="{! ( recipientWrapper.recipient.Status__c = 'Waiting for Signature' || recipientWrapper.recipient.Status__c = 'Waiting for Approval' ) && !recipientWrapper.isReplaced && !isDisableReplaceSigner && recipientWrapper.replacementRecipientWrapper == NULL }" style="background:transparent;border-width:0px;">
                                                            <apex:param assignTo="{!selectedRecipientIndex}" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" name="selectedRecipientIndex"/>
                                                        </apex:commandButton>
                                                        <apex:commandButton immediate="true" title="{!$Label.echosign_dev1__replace_recipient_submit_tooltip}" image="{!$Resource.echosign_dev1__ActionReplaceSubmit}" rendered="{! recipientWrapper.isReplaced && recipientWrapper.isSubmitReady }" rerender="recipientsListSection" style="background: transparent; border-width: 0px; padding-right: 0px; margin-right: 0px; margin-left: 0px; padding-left: 0px;" onclick="showReplaceSignerDialog(); return false;" />
                                                        <apex:commandButton immediate="true" action="{!replaceRecipientCancel}" title="{!$Label.echosign_dev1__replace_recipient_cancel_tooltip}" image="{!$Resource.echosign_dev1__ActionReplaceCancel}" rerender="recipientsListSection" rendered="{! recipientWrapper.isReplaced }" style="padding-top: 8px; padding-left: 0px; margin-left: 0px; background: transparent; border-width: 0px;">
                                                            <apex:param assignTo="{!selectedRecipientIndex}" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}" name="selectedRecipientIndex"/>
                                                        </apex:commandButton>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel id="recipientAddressValueSpan" layout="inline" style="margin-left: 550px;" styleClass="recipientAddressSpan">
                                                        <!-- <apex:inputField style="display:none" rendered="{!recipientWrapper.recipient.Recipient_Type__c!='Email'}" value="{!recipientWrapper.recipient.echosign_dev1__Email_Address__c}" /> -->
                                                        <apex:outputText id="emailDisplay" style="width: 200px;" styleClass="adobePrimaryText" value="{!recipientWrapper.EmailAddress}" rendered="{!recipientWrapper.useEmailAddress && recipientWrapper.recipient.echosign_dev1__Recipient_Type__c!='Email'}" /><br/>
                                                  
                                                    </apex:outputPanel>
                                        <apex:outputPanel id="recipientVerificationPanel" style="padding-top: 3px; margin-left: 740px; padding-left: 10px;" rendered="{! isEnableRecipientSecurityOptions && NOT(agreement.Sender_Signs_Only__c) }">
                                            <apex:outputPanel layout="inline" styleClass="recipientVerificationSpan">                               
                                                <apex:selectList id="RecipientSignerVerificationMethod" styleClass="recipientInputComponent" value="{!recipientWrapper.recipient.echosign_dev1__Signer_Verification_Method__c}" size="1" rendered="{! notYetSent }" disabled="{! isReadOnlyRecipient }">
                                                    <apex:selectOptions value="{!recipientSignerVerificationMethods}"/>
                                                    <apex:actionSupport event="onchange" rerender="recipientPasswordPanel,recipientPhonePanel"/>
                                                </apex:selectList>
                                            </apex:outputPanel>                         
                                            <apex:outputPanel id="recipientPasswordPanel" style="margin-left: 100px;">
                                                <apex:outputPanel rendered="{! AND(notYetSent,recipientWrapper.recipient.Signer_Verification_Method__c = 'Password') }">                     
                                                    <apex:inputSecret html-placeholder="{!$Label.echosign_dev1__password_prompt}" redisplay="true" value="{!recipientWrapper.password}" id="recPassword" disabled="{! isReadOnlyRecipient }"/>
                                                    <apex:inputSecret style="position: absolute;" html-placeholder="{!$Label.echosign_dev1__password_confirm_prompt}" redisplay="true" value="{!recipientWrapper.confirmPassword}" id="recConfirmPassword" disabled="{! isReadOnlyRecipient }"/>                        
                                                </apex:outputPanel>
                                            </apex:outputPanel>           
                                            <apex:outputPanel id="recipientPhonePanel" style="margin-left: 100px;">
                                                <apex:outputPanel rendered="{! recipientWrapper.recipient.Signer_Verification_Method__c = 'Phone' && isEnablePhoneAuthentication }">
                                                    <apex:selectList id="recCountryCode" value="{!recipientWrapper.recipient.echosign_dev1__Phone_Verification_Country_Code__c}" size="1" disabled="{! hasBeenSent }"> 
                                                        <apex:selectOptions value="{!countryCodeOptions}"/>    
                                                    </apex:selectList>
                                                    <apex:inputText style="position: absolute;" html-placeholder="{!$Label.echosign_dev1__recipient_phone_verification_number}" rendered="{! notYetSent }" value="{!recipientWrapper.recipient.echosign_dev1__Phone_Verification_Phone_Number__c}" id="recPhoneNumber"/> 
                                                    <apex:outputText style="position: absolute; margin-top: 5px; padding-left: 30px; width: 130px;" styleClass="adobePrimaryText" html-placeholder="{!$Label.echosign_dev1__recipient_phone_verification_number}" rendered="{! hasBeenSent }" value="{!recipientWrapper.recipient.echosign_dev1__Phone_Verification_Phone_Number__c}" id="recPhoneNumberOutput"/>                    
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputText style="margin-top: 5px; padding-left: 5px;" styleClass="adobePrimaryText" value="{!recipientWrapper.recipient.echosign_dev1__Signer_Verification_Method__c}" rendered="{! hasBeenSent }" />
                                        </apex:outputPanel>
                                        <apex:outputPanel layout="inline" style="margin-left: 1160px; padding-top: 8px;">
                                            <apex:commandButton oncomplete="initSortable();" action="{!delRecipient}" title="{!$Label.echosign_dev1__delete_recipient_tooltip}" image="{!$Resource.echosign_dev1__AdobeTrashIcon}" rerender="recipientsListSection" rendered="{!isRenderDeleteRecipient}" status="DeletingStatus" style="margin-top: -10px; background: transparent; border-width: 0px;">
                                                <apex:param name="recipientNumber" value="{!recipientWrapper.recipient.echosign_dev1__Order_Number__c}"/>
                                            </apex:commandButton>
                                        </apex:outputPanel>
                                </li>
                            </apex:repeat>
                        </ul>
                    </apex:outputPanel>
                </apex:outputPanel>
                
                <apex:outputPanel id="ButtonSection">
                    <!-- <apex:commandLink immediate="true" action="{!addReportRecipient}" value="{!$Label.echosign_dev1__add_recipient_label}" rerender="recipientsMegaSignSection" status="LoadingStatus" rendered="{! notYetSent && NOT(isDisableAddRecipient) && isMegaSignAgreementType}"/>  -->
                    <apex:commandLink oncomplete="hideInlineError(); initSortable();" styleClass="adobeLinkText" style="color: #3278BE;" immediate="false" action="{!addRecipient}" rerender="recipientsListSection" status="LoadingStatus" rendered="{! notYetSent && NOT(isDisableAddRecipient) }">
                        <img src="{!$Resource.AddRecipientIcon}" style="width: 20px; height: 20px; padding-bottom: 5px;" />
                    </apex:commandLink>
                    <apex:commandLink oncomplete="hideInlineError(); initSortable();" styleClass="adobeLinkText" style="color: #3278BE;" immediate="false" action="{!addRecipient}" value="{!$Label.echosign_dev1__add_recipient_label}" rerender="recipientsListSection" status="LoadingStatus" rendered="{! notYetSent && NOT(isDisableAddRecipient) }"/> &nbsp; &nbsp; &nbsp;
                    <!-- <apex:actionFunction immediate="true" name="recipientsListSectionJS2" action="{!addReportRecipient}" rerender="recipientsMegaSignSection" status="LoadingStatus"/> -->
                    <apex:actionFunction immediate="true" name="recipientsListSectionJS1" action="{!addRecipient}" rerender="recipientsListSection" status="LoadingStatus"/>
                    <apex:actionStatus id="LoadingStatus">
                        <apex:facet name="start">
                        <div class="waitingSearchDiv" style="width: 100%; height: 100%; display: ; opacity:.5;"></div>
                        <img src="{!$Resource.loading}" style="width:20px;height:20px" /></apex:facet>
                    </apex:actionStatus>
                </apex:outputPanel>      
                <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Signature_Flow__c.inlineHelpText}" id="signatureFlowPanel" rendered="{! isEnableSignatureFlow && NOT(agreement.Sender_Signs_Only__c) }">
                    <div style="float: left; padding-top: 5px;">
                        <apex:outputLabel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$Label.Signature_Flow_Label}: &nbsp;&nbsp;&nbsp;</apex:outputLabel>
                    </div >
                    <div class="toggle-group-container">
                        <apex:outputPanel layout="block" id="parToggle" styleClass="toggle-group left-button" title="{!$Label.echosign_dev1__parallel_signature_flow_title}">
                            <div class="text">{!$Label.echosign_dev1__parralel_signature_flow_value}</div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="block" id="seqToggle" styleClass="toggle-group right-button" title="{!$Label.echosign_dev1__sequential_signature_flow_title}">
                            <div class="text">{!$Label.echosign_dev1__sequential_signature_flow_value}</div>
                        </apex:outputPanel>
                    </div>
                </apex:outputPanel>          
                <apex:outputPanel id="senderSignsOnlyPanel" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Sender_Signs_Only__c.inlineHelpText}" rendered="{! isEnableSenderSignsOnly  }">
                    <apex:outputPanel >
                        <apex:outputPanel id="senderSignsOnlyUncheckedPanel" styleClass="adobeCheckboxField adobeCheckboxFieldUnchecked" rendered="{! NOT(agreement.Sender_Signs_Only__c) }" />
                        <apex:outputPanel id="senderSignsOnlyCheckedPanel"  styleClass="adobeCheckboxField adobeCheckboxFieldChecked" rendered="{! agreement.Sender_Signs_Only__c }" />
                        <apex:outputLabel styleClass="adobeFieldLabelRight adobePrimaryText">{!$Label.echosign_dev1__sender_signs_only_label}</apex:outputLabel>
                    </apex:outputPanel>
                    <apex:outputPanel style="margin-left: 280px;" rendered="{!AND(hasBeenSent,!isFiled,!isAborted)}">
                        <apex:commandLink id="sendAgreementSenderSignsOnlyLink" action="{!retrieveSigningUrl}" onclick="if( isIosMobile ) { showSpinner(); } else { myShow('{!$Page.echosign_dev1__SendForSignature}'); }" oncomplete="if(pageHasError=='false'){sendEnabled = false; myShow('{!agreementSigningUrl}'); showDialogCloseButton(); }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theSigningPanel,theStatusPanel" rendered="{!agreement.echosign_dev1__Sender_Signs_Only__c}">{!$Label.echosign_dev1__sender_signs_only_current_label}</apex:commandLink>                               
                    </apex:outputPanel>                     
                </apex:outputPanel>             
                <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__SenderSigns__c.inlineHelpText}" id="recDetailPanel" rendered="{! NOT(isDisableSenderSigns) && NOT(agreement.Sender_Signs_Only__c) }">
                    <apex:outputPanel >
                        <apex:outputPanel id="senderSignsUncheckedPanel" styleClass="adobeCheckboxField adobeCheckboxFieldUnchecked" rendered="{! NOT(agreement.SenderSigns__c) }" />
                        <apex:outputPanel id="senderSignsCheckedPanel"  styleClass="adobeCheckboxField adobeCheckboxFieldChecked" rendered="{! agreement.SenderSigns__c }" />
                        <apex:outputPanel layout="block">
                            <apex:outputLabel styleClass="adobeFieldLabelRight adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__SenderSigns__c.label}</apex:outputLabel>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!AND(agreement.echosign_dev1__SenderSigns__c, NOT( agreement.echosign_dev1__Signature_Flow__c == 'Any Order' ) )}">
                            <div style="margin-left: 300px;" class="toggle-group-container">
                                <apex:outputPanel layout="block" id="firstToggle" styleClass="toggle-group left-button" title="{!$Label.echosign_dev1__first_signature_order_title}">
                                    <div class="text">{!$Label.echosign_dev1__first_signature_order_value}</div>
                                </apex:outputPanel>
                                <apex:outputPanel layout="block" id="lastToggle" styleClass="toggle-group right-button" title="{!$Label.echosign_dev1__last_signature_order_title}">
                                    <div class="text">{!$Label.echosign_dev1__last_signature_order_value}</div>
                                </apex:outputPanel>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>                      
                </apex:outputPanel>
                <apex:outputPanel id="hostedPanel" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Enable_Hosted_Signing__c.inlineHelpText}" rendered="{! cusSettings.Enable_Hosted_Signing_Field__c && NOT(agreement.Sender_Signs_Only__c)  }">
                    <apex:outputPanel >
                        <apex:outputPanel id="hostedUncheckedPanel" styleClass="adobeCheckboxField adobeCheckboxFieldUnchecked" rendered="{! NOT(agreement.Enable_Hosted_Signing__c) }" />
                        <apex:outputPanel id="hostedCheckedPanel"  styleClass="adobeCheckboxField adobeCheckboxFieldChecked" rendered="{! agreement.Enable_Hosted_Signing__c }" />
                        <apex:outputLabel styleClass="adobeFieldLabelRight adobePrimaryText">{!$Label.echosign_dev1__host_sign_first_label}</apex:outputLabel>
                    </apex:outputPanel>
                    <apex:outputPanel style="margin-left: 480px;" rendered="{!AND(hasBeenSent,!isFiled,!isAborted)}">
                        <apex:commandLink action="{!retrieveSigningUrl}" onclick="if( isIosMobile ) { showSpinner(); } else { myShow('{!$Page.echosign_dev1__SendForSignature}'); }" oncomplete="if(pageHasError=='false'){sendEnabled = false; myShow('{!agreementSigningUrl}'); showDialogCloseButton(); }else{onFinish();}" rerender="errorPanel,errorPanelBottom,floatingDiv,agreementDetailsOP,AgreementOptionsSection,recipientsSection,theSigningPanel,theStatusPanel" rendered="{!agreement.echosign_dev1__Enable_Hosted_Signing__c}">{!$Label.echosign_dev1__host_sign_current_label}</apex:commandLink>                               
                    </apex:outputPanel>                        
                </apex:outputPanel>        
                
                <apex:outputPanel rendered="{! NOT(isDisableCc) }" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Cc__c.inlineHelpText}">
                    <apex:outputLabel styleClass="adobePrimaryText">{!$ObjectType.SIGN_Agreement__c.fields.Cc__c.label}: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</apex:outputLabel>
                    <apex:inputText styleClass="adobeTextInput adobePrimaryText" value="{!agreement.echosign_dev1__Cc__c}" size="100" rendered="{!notYetSent}" disabled="{! isReadOnlyCc }"/>
                    <apex:outputField styleClass="adobePrimaryText" value="{!agreement.echosign_dev1__Cc__c}" rendered="{!hasBeenSent}" />
                </apex:outputPanel>
            </apex:pageBlockSection>
            
            <apex:pageBlockSection title="{!$Label.echosign_dev1__detail_section_header}"/>
            
            <apex:outputPanel id="agreementDetailsOP">
            <table width="90%">
                <tr>
                    <td style="" align="right" width="25%"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.Name.label}</apex:outputPanel></td>
                    <td colspan="3">
                        <apex:outputPanel title="{!$Label.echosign_dev1__agreement_name_tooltip}" styleClass="requiredInput" layout="block" rendered="{! notYetSent && !isReadOnlyAgreementName }">  
                            <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                            <apex:inputfield style="width:515px" id="agreementName" value="{!agreement.Name}"/>
                            <apex:outputPanel styleClass="errorMsg" layout="block" rendered="{!errorAgreementName}">
                                <strong>{!$Label.echosign_dev1__error_heading}:</strong> {!$Label.echosign_dev1__required_value_error}.
                            </apex:outputPanel>                            
                        </apex:outputPanel>
                        <apex:outputText title="{!$Label.echosign_dev1__agreement_name_tooltip}" value="{!agreement.Name}" rendered="{! hasBeenSent || isReadOnlyAgreementName }"/>
                    </td>
                </tr>
                <tr>
                    <td align="right" width="25%"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Message__c.label}</apex:outputPanel></td>
                    <td colspan="3">
                        <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Message__c.inlineHelpText}">
                            <apex:inputTextArea value="{!agreement.echosign_dev1__Message__c}" rows="5" cols="100" rendered="{!notYetSent}" disabled="{! isReadOnlyMessage }" />
                            <apex:outputText value="{!agreement.echosign_dev1__Message__c}" rendered="{!hasBeenSent}" />
                        </apex:outputPanel>
                    </td>
                </tr> 
                <tr>
                    <td align="right" width="25%"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__AgreementLocale__c.label}</apex:outputPanel></td>
                    <td width="25%">
                        <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__AgreementLocale__c.inlineHelpText}" styleClass="requiredInput" layout="block" rendered="{!notYetSent}">  
                            <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                            <apex:selectList value="{!agreement.echosign_dev1__AgreementLocale__c}" size="1" disabled="{! isReadOnlyLanguage }">
                                <apex:selectOptions value="{!languages}"/>
                            </apex:selectList>
                            <apex:outputPanel styleClass="errorMsg" layout="block" rendered="{!errorAgreementLocale}">
                                <strong>{!$Label.echosign_dev1__error_heading}:</strong> {!$Label.echosign_dev1__required_value_error}.
                            </apex:outputPanel>
                        </apex:outputPanel>
                        <apex:outputText title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__AgreementLocale__c.inlineHelpText}" value="{!agreement.echosign_dev1__AgreementLocale__c}" rendered="{!hasBeenSent}" />
                    </td>
                    <td align="right" width="25%"><apex:outputPanel rendered="{! NOT(isDisableOpportunityLookup) }"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Opportunity__c.label}</apex:outputPanel></apex:outputPanel></td>
                    <td width="25%">
                        <apex:outputPanel rendered="{! NOT(isDisableOpportunityLookup) }">
                            <apex:inputField value="{!agreement.echosign_dev1__Opportunity__c}" rendered="{! notYetSent && !isReadOnlyOpportunity }"/>
                            <apex:outputField value="{!agreement.echosign_dev1__Opportunity__c}" rendered="{! hasBeenSent || isReadOnlyOpportunity }" />
                        </apex:outputPanel>
                    </td>
                                       
                </tr>
                <tr>
                    <td align="right" width="25%"><apex:outputPanel rendered="{! NOT(isDisableSignatureType) && NOT(agreement.Sender_Signs_Only__c) }"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__SignatureType__c.label}</apex:outputPanel></apex:outputPanel></td>
                    <td width="25%">
                        <apex:outputPanel styleClass="requiredInput" layout="block" rendered="{! notYetSent && NOT(isDisableSignatureType) && NOT(agreement.Sender_Signs_Only__c) }">  
                            <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                            <apex:selectList value="{!agreement.echosign_dev1__SignatureType__c}" size="1" disabled="{! isReadOnlySignatureType }">
                                <apex:selectOption itemValue="e-Signature" itemLabel="{!$Label.echosign_dev1__e_signature_type_label}" />
                                <apex:selectOption itemValue="Written Signature" itemLabel="{!$Label.echosign_dev1__written_signature_type_label}" />
                                <apex:actionSupport event="onchange" action="{!updateEmail_FaxAddressForAll}" rerender="recipientsListSection"/>
                            </apex:selectList>                           
                            <apex:outputPanel styleClass="errorMsg" layout="block" rendered="{!errorSignatureType}">
                                <strong>{!$Label.echosign_dev1__error_heading}:</strong> {!$Label.echosign_dev1__required_value_error}.
                            </apex:outputPanel>
                        </apex:outputPanel>
                        <apex:outputField value="{!agreement.echosign_dev1__SignatureType__c}" rendered="{! hasBeenSent && NOT(isDisableSignatureType) && NOT(agreement.Sender_Signs_Only__c) }" />
                    </td>
                    <td align="right" width="25%"><apex:outputPanel rendered="{! NOT(isDisableAccountLookup) }"><apex:outputPanel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Account__c.label}</apex:outputPanel></apex:outputPanel></td>
                    <td width="25%">
                        <apex:outputPanel rendered="{! NOT(isDisableAccountLookup) }">
                            <apex:inputField value="{!agreement.echosign_dev1__Account__c}" rendered="{! notYetSent && !isReadOnlyAccount }"/>
                            <apex:outputField value="{!agreement.echosign_dev1__Account__c}" rendered="{! hasBeenSent || isReadOnlyAccount }" />
                        </apex:outputPanel>
                    </td> 
                                       
                </tr>                            
                <tr>                    
                    <apex:outputPanel rendered="{!AND(isFiled, LEN(agreement.echosign_dev1__SignedPDF__c) > 0)}">   
                    <td align="right" width="25%"><apex:outputPanel style="padding-right: 5px;" styleClass="adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Document__c.label}</apex:outputPanel></td>
                    <td width="25%">
                        <apex:outputlink styleClass="adobeLinkText" style="color: #3278BE;" rendered="{!NOT ISNULL(agreement.echosign_dev1__SignedPDF__c)}" value="{!agreement.echosign_dev1__SignedPDF__c}">
                            <apex:image value="https://secure.echosignforsalesforce.com/images/salesforce-pdf-icon.gif"/>
                            {!agreement.Name} - {! IF(isSigned, 'signed', 'approved') }.pdf
                        </apex:outputlink>
                    </td>                   
                    </apex:outputPanel> 
                </tr>              
                <!-- <tr>                    
                    <apex:outputPanel rendered="{!AND(isFiled, LEN(agreement.Audit_Link__c) > 0)}">   
                    <td align="right" width="25%"><b>{!$ObjectType.SIGN_Agreement__c.fields.Audit_Link__c.label}</b>&nbsp;</td>
                    <td width="25%">
                        <apex:outputlink rendered="{!NOT ISNULL(agreement.Audit_Link__c)}" value="{!agreement.Audit_Link__c}">
                            <apex:image value="https://secure.echosignforsalesforce.com/images/salesforce-pdf-icon.gif"/>
                            {!agreement.Name} - audit.pdf
                        </apex:outputlink>
                    </td>                   
                    </apex:outputPanel> 
                </tr>
                <tr>                    
                    <apex:outputPanel rendered="{!isMegaSignChildAgreement}">   
                    <td align="right" width="25%"><b>{!$ObjectType.SIGN_Agreement__c.fields.Parent_Agreement_ID__c.label}</b>&nbsp;</td>
                    <td width="25%">
                        <apex:image style="width: 20px; height: 20px;" value="{!$Resource.AgreementLogo}"/>
                        <apex:outputlink rendered="{!NOT ISNULL(agreement.Parent_Agreement_ID__c)}" value="/{!agreement.Parent_Agreement_ID__c}">
                            
                            {!parentAgreement.Name}.pdf
                        </apex:outputlink>
                    </td>                   
                    </apex:outputPanel> 
                </tr> -->
            </table>                
            </apex:outputPanel>
            <apex:pageBlockSection title="{!$Label.echosign_dev1__agreement_options_section_header}" columns="1" id="AgreementOptionsSection">
                <!-- <apex:outputPanel >
                    <apex:outputLabel >{!$ObjectType.SIGN_Agreement__c.fields.Agreement_Type__c.label}</apex:outputLabel> 
                    <apex:inputField value="{!agreement.Agreement_Type__c}" rendered="{! notYetSent }">
                        <apex:actionSupport event="onchange" rerender="detailPageBlock" action="{!onSetAgreementType}" />
                    </apex:inputField>
                </apex:outputPanel> -->
                <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Signing_Deadline__c.inlineHelpText}" rendered="{! NOT(isDisableSignExpiration) }">
                    <apex:outputLabel styleClass="adobeFieldLabelLeft adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Signing_Deadline__c.label}:</apex:outputLabel>
                    <apex:inputField value="{!agreement.echosign_dev1__Signing_Deadline__c}" rendered="{! notYetSent && !isReadOnlySignExpiration }" />
                    <apex:outputField value="{!agreement.echosign_dev1__Signing_Deadline__c}" rendered="{! hasBeenSent || isReadOnlySignExpiration }" />
                </apex:outputPanel>
                <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Enable_Automatic_Reminders__c.inlineHelpText}" id="remindRecipientPanel" rendered="{! NOT(isDisableSignReminder) }">
                    <apex:outputPanel >
                        <apex:outputPanel id="reminderUncheckedPanel" styleClass="adobeCheckboxField adobeCheckboxFieldUnchecked" rendered="{! NOT(agreement.Enable_Automatic_Reminders__c) }" />
                        <apex:outputPanel id="reminderCheckedPanel"  styleClass="adobeCheckboxField adobeCheckboxFieldChecked" rendered="{! agreement.Enable_Automatic_Reminders__c }" />
                        <apex:outputLabel styleClass="adobeFieldLabelRight adobePrimaryText">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__RemindRecipient__c.label}</apex:outputLabel>
                        <apex:outputPanel style="margin-left: 300px;" styleClass="adobePrimaryText" rendered="{!AND(OR(hasBeenSent,isReadOnlySignReminder), agreement.echosign_dev1__Enable_Automatic_Reminders__c)}">
                            <apex:outputField value="{!agreement.echosign_dev1__RemindRecipient__c}"/>
                        </apex:outputPanel>
                    </apex:outputPanel>              
                    <apex:inputField style="margin-left: 260px;" value="{!agreement.echosign_dev1__RemindRecipient__c}" rendered="{!AND(AND(notYetSent,!isReadOnlySignReminder), agreement.echosign_dev1__Enable_Automatic_Reminders__c)}"/>                                   
                </apex:outputPanel>   
                <apex:outputPanel id="authoringPanel" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Authoring__c.inlineHelpText}" rendered="{! NOT(isDisablePreviewPosition) }">                
                    <apex:outputPanel >
                        <apex:outputPanel id="authoringUncheckedPanel" styleClass="adobeCheckboxField adobeCheckboxFieldUnchecked" rendered="{! NOT(agreement.Authoring__c) }" />
                        <apex:outputPanel id="authoringCheckedPanel"  styleClass="adobeCheckboxField adobeCheckboxFieldChecked" rendered="{! agreement.Authoring__c }" />
                        <apex:outputLabel styleClass="adobeFieldLabelRight adobePrimaryText">{!$Label.echosign_dev1__authoring_field_label}</apex:outputLabel>
                    </apex:outputPanel>
                </apex:outputPanel>  
                <apex:outputPanel id="postSignOptionsPanel" rendered="{! isEnablePostSignOptions }">                
                    <apex:outputPanel layout="block" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Post_Sign_Redirect_URL__c.inlineHelpText}" style="margin-top: 5px;">
                        <apex:outputLabel styleClass="adobePrimaryText">{!$ObjectType.SIGN_Agreement__c.fields.Post_Sign_Redirect_URL__c.label}: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</apex:outputLabel>
                        <apex:inputText styleClass="adobeTextInput adobePrimaryText" style="margin-left: 68px; width: 40%;" value="{!agreement.echosign_dev1__Post_Sign_Redirect_URL__c}" size="100" rendered="{! notYetSent && !isReadOnlyPostSignOptions }"/>
                        <apex:outputField styleClass="adobePrimaryText" value="{!agreement.echosign_dev1__Post_Sign_Redirect_URL__c}" rendered="{! hasBeenSent || isReadOnlyPostSignOptions }" />
                    </apex:outputPanel>
                    <apex:outputPanel layout="block" title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Post_Sign_Redirect_Delay__c.inlineHelpText}" style="margin-top: 5px;">
                        <apex:outputLabel styleClass="adobePrimaryText">{!$ObjectType.SIGN_Agreement__c.fields.Post_Sign_Redirect_Delay__c.label}: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</apex:outputLabel>
                        <apex:inputText styleClass="adobeTextInput adobePrimaryText" style="width: 10%;" value="{!agreement.echosign_dev1__Post_Sign_Redirect_Delay__c}" size="100" rendered="{! notYetSent && !isReadOnlyPostSignOptions }"/>
                        <apex:outputField styleClass="adobePrimaryText" value="{!agreement.echosign_dev1__Post_Sign_Redirect_Delay__c}" rendered="{! hasBeenSent || isReadOnlyPostSignOptions }" />
                    </apex:outputPanel>
                </apex:outputPanel>
                
                <apex:inputHidden id="pageHasError" value="{!pageHasError}" /> 
                            
                        <script>   
                   function noenter(ev) {
                      if( window.event ) {
                          ev = window.event;
                      }
                       
                      var keyCode;
                      if (ev.keyCode) {
                         keyCode = ev.keyCode;
                      } else {
                         keyCode = ev.charCode;
                      }
                       
                      if( keyCode == 13 ) {
                         document.getElementById('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.saveAgreementLink}').click();
                         return false;
                      } else {
                         return true;
                      }
                   }
                   
                function styleButtons() {
                    try {
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementLink}') ).removeClass('btn');            
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.saveAgreementLink}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.sendAgreementLink}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.saveAgreementLink}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.cancelAgreementLink}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.cancelAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.deleteAgreement}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.cancelAgreementLink}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.cancelAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.deleteAgreement}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.updateAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.viewAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.remindAgreement}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.updateAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.viewAgreement}') ).removeClass('btn');
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.actionPageBlock455.buttonsSection.buttons.remindAgreement}') ).removeClass('btn');
                    
                    $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.attachmentSection.attachmentsBlockSection.uploadAgreementLink}') ).removeClass('btn');
                    } catch(e) {
                        console.log(e);
                    }
                }
                                                 
                jQuery(window).on("load", function() {
                    if( !{!isApiKeySet} ) {
                        window.location = '/apex/EchoSignAdmin';
                    } /*else if( (typeof sforce != 'undefined') && (sforce != null) && (sforce.one != null) ) {
                        try {
                            var idParam = '{!JSENCODE($CurrentPage.parameters.id)}';
                            if( idParam ) {
                                sforce.one.navigateToURL('/apex/{!namespace}__AgreementMobile?id=' + idParam);
                            } else {
                                sforce.one.navigateToURL('/apex/{!namespace}__AgreementMobile');
                            }
                        } catch(err) {
                            document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                            //Ignore, conflict from sidebar
                            console.log(err);
                        }
                    }*/ else {
                        document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                    }

                    init();
                    
                    try {
                        buildPopup();
                    } catch(err) {
                        console.log(err);
                    }
                    
                    styleButtons();
                    alignRecipientUserLookup();
                    initListeners();
                    onLoadActions();
                });
                
                function alignRecipientUserLookup() {
                    try {
                        $jquery('.lookupInput').each(function (index, element) {
                            var parentElement = $jquery(element).parent();
                            if( parentElement.attr('id').indexOf('userRecipientInputField') != -1 ) {
                                $jquery(element).css('margin-left', '5px');
                            }
                        });
                    } catch(err) {
                        //Ignore, jquery version conflict from sidebar
                        //console.log(err);
                    }
                }
                
                function showRecipientRolePicker(orderNumber, currentRole) {
                        var recipientRowItemElement = $jquery( document.getElementById('recipientRowItem' + orderNumber) );
                        var position = recipientRowItemElement.position();
                        
                        var dialogElement = $jquery( document.getElementById('recipientRoleSelectorDialog') );
                        dialogElement.css('top', position.top + 19);
                        dialogElement.css('left', position.left + 120);
                        dialogElement.show('fast', function() {});
                        
                        dialogElement.blur(function() {
                        });
                        
                        $jquery(document).mouseup(function (e)
                        {
                            var container = dialogElement;
                        
                            if (!container.is(e.target) // if the target of the click isn't the container...
                                && container.has(e.target).length === 0) // ... nor a descendant of the container
                            {
                                container.hide();
                            }
                        });
                        
                        var signerOptionElement = $jquery( document.getElementById('signerOptionElement') );
                        var approverOptionElement = $jquery( document.getElementById('approverOptionElement') );
                        
                        var signerSelectorElement = $jquery( document.getElementById('signerSelectorElement') );
                        var approverSelectorElement = $jquery( document.getElementById('approverSelectorElement') );
                        
                        if( currentRole == 'Approver' ) {
                            setApproverSelection(signerSelectorElement, approverSelectorElement);
                        } else {
                            setSignerSelection(signerSelectorElement, approverSelectorElement);
                        }
                        
                        signerOptionElement.click(function() {
                            setSignerSelection(signerSelectorElement, approverSelectorElement);
                            dialogElement.hide('fast', function() {});
                            setRecipientRoleSigner(orderNumber);
                        });
                        
                        approverOptionElement.click(function() {
                            setApproverSelection(signerSelectorElement, approverSelectorElement);
                            dialogElement.hide('fast', function() {});
                            setRecipientRoleApprover(orderNumber);
                        });
                }
                
                function setSignerSelection(signerSelectorElement, approverSelectorElement) {
                    signerSelectorElement.removeClass('no-selection-indicator');
                    signerSelectorElement.addClass('selection-indicator');
                    approverSelectorElement.removeClass('selection-indicator');
                    approverSelectorElement.addClass('no-selection-indicator');
                }
                
                function setApproverSelection(signerSelectorElement, approverSelectorElement) {
                    approverSelectorElement.removeClass('no-selection-indicator');
                    approverSelectorElement.addClass('selection-indicator');
                    signerSelectorElement.removeClass('selection-indicator');
                    signerSelectorElement.addClass('no-selection-indicator');
                }
                
                function initListeners() {
                    initSenderSignsListeners();
                    initSenderSignsOnlyListeners();
                    initHostedListeners();
                    initAuthoringListeners();
                    initReminderListeners();
                    initFlowListeners();
                    initOrderListeners('{!JSENCODE(agreement.SignatureOrder__c)}');
                } 
                
                function initOrderListeners(signatureOrder) {
                    var firstToggleElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.firstToggle}') );
                    var lastToggleElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.lastToggle}') );
                    
                    if( signatureOrder == 'Recipient signs, then I sign' ) {
                        lastToggleElement.addClass('down');
                        firstToggleElement.removeClass('down');
                    } else if( signatureOrder == 'I sign, then the Recipient signs' ) {
                        lastToggleElement.removeClass('down');
                        firstToggleElement.addClass('down');
                    }
                    
                    if( {! OR(hasBeenSent, isReadOnlySenderSigns) } ) {
                        return;
                    }
                    
                    firstToggleElement.addClass('adobeCheckboxFieldEditable'); 
                    firstToggleElement.click(function() {
                        firstToggleElement.addClass('down');
                        lastToggleElement.removeClass('down');
                        toggleOrder();
                    });
                    
                    lastToggleElement.addClass('adobeCheckboxFieldEditable'); 
                    lastToggleElement.click(function() {
                        firstToggleElement.removeClass('down');
                        lastToggleElement.addClass('down');
                        toggleOrder();
                    });
                }
                                
                function initFlowListeners() {
                    var sequentialToggleElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.seqToggle}') );
                    var parallelToggleElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.parToggle}') );
                    
                    if( '{!JSENCODE(agreement.Signature_Flow__c)}' == 'Order Entered' ) {
                        sequentialToggleElement.addClass('down');
                        parallelToggleElement.removeClass('down');
                    } else if( '{!JSENCODE(agreement.Signature_Flow__c)}' == 'Any Order' ) {
                        sequentialToggleElement.removeClass('down');
                        parallelToggleElement.addClass('down');
                    } else {
                        sequentialToggleElement.addClass('down');
                        parallelToggleElement.removeClass('down');
                    }
                    
                    if( {! OR(hasBeenSent, isReadOnlySignatureFlow) } ) {
                        return;
                    }
                    
                    sequentialToggleElement.addClass('adobeCheckboxFieldEditable');                 
                    sequentialToggleElement.click(function() {
                        sequentialToggleElement.addClass('down');
                        parallelToggleElement.removeClass('down');
                        toggleFlow();
                    });
                    
                    parallelToggleElement.addClass('adobeCheckboxFieldEditable');
                    parallelToggleElement.click(function() {
                        sequentialToggleElement.removeClass('down');
                        parallelToggleElement.addClass('down');
                        toggleFlow();
                    });
                }
                                
                function initReminderListeners() {
                    if( {! OR(hasBeenSent, isReadOnlySignReminder) } ) {
                        return;
                    }
                    
                    var uncheckedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.AgreementOptionsSection.reminderUncheckedPanel}') );
                    var checkedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.AgreementOptionsSection.reminderCheckedPanel}') );
                    
                    uncheckedElement.addClass('adobeCheckboxFieldEditable');
                    uncheckedElement.click(function() {
                        uncheckedElement.removeClass('adobeCheckboxFieldUnchecked');
                        uncheckedElement.addClass('adobeCheckboxFieldActive');
                        toggleReminder();
                    });
                    
                    checkedElement.addClass('adobeCheckboxFieldEditable');
                    checkedElement.click(function() {
                        checkedElement.removeClass('adobeCheckboxFieldChecked');
                        checkedElement.addClass('adobeCheckboxFieldActive');
                        toggleReminder();
                    });
                }
                                
                function initAuthoringListeners() {
                    if( {! OR(hasBeenSent, isReadOnlySignPreviewPosition) } ) {
                        return;
                    }
                    
                    var uncheckedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.AgreementOptionsSection.authoringUncheckedPanel}') );
                    var checkedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.AgreementOptionsSection.authoringCheckedPanel}') );
                    
                    uncheckedElement.addClass('adobeCheckboxFieldEditable');
                    uncheckedElement.click(function() {
                        uncheckedElement.removeClass('adobeCheckboxFieldUnchecked');
                        uncheckedElement.addClass('adobeCheckboxFieldActive');
                        toggleAuthoring();
                    });
                    
                    checkedElement.addClass('adobeCheckboxFieldEditable');
                    checkedElement.click(function() {
                        checkedElement.removeClass('adobeCheckboxFieldChecked');
                        checkedElement.addClass('adobeCheckboxFieldActive');
                        toggleAuthoring();
                    });
                }
                
                function initSenderSignsOnlyListeners() {
                    if( {! OR(hasBeenSent, isFiled, isReadOnlySenderSignsOnly) } ) {
                        return;
                    }
                    
                    var uncheckedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.senderSignsOnlyUncheckedPanel}') );
                    var checkedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.senderSignsOnlyCheckedPanel}') );
                    
                    uncheckedElement.addClass('adobeCheckboxFieldEditable');
                    uncheckedElement.click(function() {
                        uncheckedElement.removeClass('adobeCheckboxFieldUnchecked');
                        uncheckedElement.addClass('adobeCheckboxFieldActive');
                        toggleSenderSignsOnly();
                    });
                    
                    checkedElement.addClass('adobeCheckboxFieldEditable');
                    checkedElement.click(function() {
                        checkedElement.removeClass('adobeCheckboxFieldChecked');
                        checkedElement.addClass('adobeCheckboxFieldActive');
                        toggleSenderSignsOnly();
                    });
                }
                
                function initHostedListeners() {
                    if( {! OR(hasBeenSent, isFiled, isReadOnlyHostedSigning) } ) {
                        return;
                    }
                    
                    var uncheckedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.hostedUncheckedPanel}') );
                    var checkedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.hostedCheckedPanel}') );
                    
                    uncheckedElement.addClass('adobeCheckboxFieldEditable');
                    uncheckedElement.click(function() {
                        uncheckedElement.removeClass('adobeCheckboxFieldUnchecked');
                        uncheckedElement.addClass('adobeCheckboxFieldActive');
                        toggleHosted();
                    });
                    
                    checkedElement.addClass('adobeCheckboxFieldEditable');
                    checkedElement.click(function() {
                        checkedElement.removeClass('adobeCheckboxFieldChecked');
                        checkedElement.addClass('adobeCheckboxFieldActive');
                        toggleHosted();
                    });
                }
                
                function initSenderSignsListeners() {
                    if( {! hasBeenSent || isReadOnlySenderSigns } ) {
                        return;
                    }
                    
                    var uncheckedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.senderSignsUncheckedPanel}') );
                    var checkedElement = $jquery( getSelectorFromSalesforceId('{!$Component.AgreementFormId.detailPageBlock.recipientsSection.senderSignsCheckedPanel}') );
                    
                    uncheckedElement.addClass('adobeCheckboxFieldEditable');
                    uncheckedElement.click(function() {
                        uncheckedElement.removeClass('adobeCheckboxFieldUnchecked');
                        uncheckedElement.addClass('adobeCheckboxFieldActive');
                        toggleSenderSigns();
                    });
                    
                    checkedElement.addClass('adobeCheckboxFieldEditable');
                    checkedElement.click(function() {
                        checkedElement.removeClass('adobeCheckboxFieldChecked');
                        checkedElement.addClass('adobeCheckboxFieldActive');
                        toggleSenderSigns();
                    });
                }
                
                            var isErrorFromServer = false; 
                            var sendEnabled = true;                                
                            var pageHasError = document.getElementById("{!$Component.AgreementFormId.detailPageBlock.AgreementOptionsSection.pageHasError}").value;                         
                            if('{!showSecPopup}'=='true'){
                                 buildSecurityPopup();  
                            }
                            
                    function isNumberKey(evt)
                    {                    
                        var charCode = (evt.which) ? evt.which : evt.keyCode;
                        if (charCode > 31 && (charCode < 47 || charCode > 57 ) )
                        {
                            return false;
                        }
                        else
                        {
                            return true;
                        }
                    }
                    function init() {                
                        // set focus on your element here 
                        if(document.getElementById('{!$Component.AgreementFormId.detailPageBlock.agreementName}')!=null)
                            document.getElementById('{!$Component.AgreementFormId.detailPageBlock.agreementName}').focus();
                            
                        initSortable();
                    }
                    
                    function hideInlineError() {
                        $jquery( '.errorMsg' ).each(function( index ) {
                            if( $jquery( this ).parent().hasClass( 'recipientValueSpan' ) ) {
                                $jquery( this ).hide('fast', function() {});
                            }
                        });
                    }
                    
                    function initSortable() {
                        try {
                            if( {! AND( NOT(hasBeenSent), NOT(isDisableSortRecipients) ) } ) {
                                $jquery( "#sortable" ).sortable({
                                    placeholder: "ui-state-highlight",
                                    update: function( event, ui ) { 
                                        var liIds = $jquery('#sortable li').map(function(i,n) {
                                            return $jquery(n).attr('id');
                                        }).get();
                                        
                                        var recipientIndexes = new Array();
                                        for( var i = 0; i < liIds.length; i++ ) {
                                            recipientIndexes.push( liIds[i].substr(16) );
                                        }
                                        
                                        var recipientIndexesStr = recipientIndexes.join(',');
                                        reorderRecipients(recipientIndexesStr);
                                    }
                                });
                                //$jquery( '#sortable' ).disableSelection();
                            }
                            
                            if( {! AND( NOT(hasBeenSent), NOT(isDisableSortAttachments) ) } ) {
                                $jquery( "#sortableDocuments" ).sortable({
                                    placeholder: "ui-state-highlight",
                                    update: function( event, ui ) { 
                                        var liIds = $jquery('#sortableDocuments li').map(function(i,n) {
                                            return $jquery(n).attr('id');
                                        }).get();
                                        
                                        var documentIndexes = new Array();
                                        for( var i = 0; i < liIds.length; i++ ) {
                                            documentIndexes.push( liIds[i].substr(15) );
                                        }
                                        
                                        var documentIndexesStr = documentIndexes.join(',');
                                        reorderAttachments(documentIndexesStr);
                                    }
                                });
                                //$jquery( '#sortableDocuments' ).disableSelection();
                            }           
                        } catch(err) {
                            //Ignore, jquery version conflict from sidebar
                            console.log(err);
                        }
                    }
                    
                    function onLoadActions() {
                        var onLoadAction = '{! JSENCODE($CurrentPage.parameters.onloadAction) }'.toLowerCase();
                        var onLoadActionField = '{! JSENCODE(agreement.On_Load_Action__c) }';

                        if( {!isEnableOnloadActionSend} && 
                            ( onLoadAction == 'send' || onLoadActionField == 'Send' ) ) {
                            if(!confirm('{! JSENCODE($Label.Send_Agreement_Prompt) }')){return false;} document.getElementById('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementLink}').click();
                        } else if( {!isEnableOnloadActionRemind} && 
                            ( onLoadAction == 'remind' || onLoadActionField == 'Remind' ) ) {
                            if(!confirm('{! JSENCODE($Label.Remind_Agreement_Prompt) }')){return false;} sendReminder();
                        } else if( {!isEnableOnloadActionUpdate} && 
                            ( onLoadAction == 'update' || onLoadActionField == 'Update' ) ) {
                            if(!confirm('{! JSENCODE($Label.Update_Agreement_Prompt) }')){return false;} updateStatus();
                        } else if( {!isEnableOnloadActionDelete} && 
                            ( onLoadAction == 'delete' || onLoadActionField == 'Delete' ) ) {
                            if(!confirm('{! JSENCODE($Label.Delete_Agreement_Prompt) }')){return false;} deleteAgreement();
                        } else if( {!isEnableOnloadActionCancel} && 
                            ( onLoadAction == 'cancel' || onLoadActionField == 'Cancel' ) ) {
                            if(!confirm('{! JSENCODE($Label.Cancel_Confirm_Prompt) }')){return false;} cancelAgreement();
                        } else if( {!isEnableOnloadActionView} && 
                            ( onLoadAction == 'view' || onLoadActionField == 'View' ) ) {
                            if(!confirm('{! JSENCODE($Label.View_Agreement_Prompt) }')){return false;} viewAgreement();
                        }
                    }

                    function onComplete(){
                        hideInlineError();
                        if(pageHasError=='false'){  
                            createAgreement();
                        }else{ 
                            initListeners(); 
                            if( isIE6 || {!isWindowActionWindowType} ) {                      
                                if(popup && !popup.closed){
                                    if( isIosMobile ) {
                                        hideSpinner();
                                    } else {
                                        popup.close();
                                    }   
                                }                               
                            }else{
                                box.cancel();
                            }
                        }
                    }                                   

                    function onFinish(){
                        if( sforce.console.isInConsole() ) {
                            hideConsolePanel();
                        }
                        
                        if( isIE6 || {!isWindowActionWindowType} ) {                 
                            if(popup && !popup.closed){
                                if( isIosMobile ) {
                                    hideSpinner();
                                } else {
                                    popup.close();
                                }
                            } else if( isIosMobile ) {
                                box.cancel();
                            }                             
                        }else{
                            box.cancel();
                        }
                    } 
                      
                function buildSecurityPopup() {
                    var secbox = sfdcPage.getDialogById("EchoSignSecurityPopup");
                                    
                    if( secbox == null ) {
                       secbox = new parent.SimpleDialog("EchoSignSecurityPopup", true); 
                       secbox.cancel=function() { secbox.hide(); };
                       parent.secbox = secbox; 
                       sfdcPage.dialogs[parent.secbox.id] = parent.secbox;
                       secbox.displayX=false;                   
                       secbox.createDialog();        
                       secbox.setWidth("435px");                       
                    }
                    
                    var frameUrl = '{!$Page.ApiKeyInput}?reloadPage=true';
                    var srcFrame = '<iframe height="480px" width="400px" frameborder="no" id="popup" style="border:0;" src="'+frameUrl+'"></iframe>';
                    secbox.setContentInnerHTML(srcFrame);
                    secbox.show();
               }
          
            function hidesecWindow(){
                if(pageHasError=='false'){
                    secbox.hide();
                    setTimeout("reloadPage()", 750);                            
                }else{
                    secbox.hide();
                }
            }                          
            function buildPopup(){   
                var box = sfdcPage.getDialogById("EchoSignWindow");                   
                if( box == null && parent.SimpleDialog != null ) {
                    box = new parent.SimpleDialog("EchoSignWindow", true); 
                    box.cancel=function(){hideWindow();};
                    parent.box = box; 
                    sfdcPage.dialogs[parent.box.id] = parent.box;
                    box.displayX=false;         
                    box.createDialog(); 
                    box.setWidth("1050px"); //box.setWidth("75%");
                }
            }
            
            // Calculate the size of the page so we can set the popup size
             var viewportwidth;
             var viewportheight;
             
             // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
             
             if (typeof window.innerWidth != 'undefined')
             {
                  viewportwidth = window.innerWidth,
                  viewportheight = window.innerHeight
             }
             
            // IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
            
             else if (typeof document.documentElement != 'undefined'
                 && typeof document.documentElement.clientWidth !=
                 'undefined' && document.documentElement.clientWidth != 0)
             {
                   viewportwidth = document.documentElement.clientWidth,
                   viewportheight = document.documentElement.clientHeight
             }
             
             // older versions of IE
             
             else
             {
                   viewportwidth = document.getElementsByTagName('body')[0].clientWidth,
                   viewportheight = document.getElementsByTagName('body')[0].clientHeight
             }
            var height = viewportheight*.85; 
            var frameWidth = 980; //viewportwidth*.72;   //"100%";
            
                    function hideWindow(){
                        if(pageHasError=='false'){
                            box.hide();
                            setTimeout("reloadPage()", 750);                            
                        }else{
                            box.hide();
                        }
                    }  
                    
                    function hideFrame() {
                        box.hide();
                    }
                    
                                        
                    function isFrameUrlMobile(url) {
                        if( ( url.indexOf('{!$Page.SendReminder}') != -1 ) ||
                            ( url.indexOf('{!$Page.DeleteAgreement}') != -1 ) ||
                            ( url.indexOf('{!$Page.CancelAgreement}') != -1 ) ) {
                            return true;
                        }

                        return false;
                    }
                    
                    function hideConsolePanel() {
                        document.getElementById('viewAgreementConsolePanel').style.display = 'none';
                        document.getElementById('{!$Component.agreementPanel}').style.display = 'block';
                        
                        reloadPage();
                    }
                    
                    function showDialogCloseButton() {
                        window.document.getElementById('dialogCloseButton').style.display = 'block';
                        
                        if( sforce.console.isInConsole() ) {
                            window.document.getElementById('dialogCloseButtonTop').style.display = 'block';
                        }
                    }
     
                    function myShow(myURL){
                        if( {!isWindowActionWindowType} ) {
                            echosignPopup(myURL);
                        } else if( sforce.console.isInConsole() ) {
                            var mySRC = '<div class="buttons"><input id="dialogCloseButtonTop" style="display: none; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto;" value="{!$Label.Close_Button_Label}" class="btn" name="{!$Label.Close_Button_Label}" onclick="hideConsolePanel()" title="{!$Label.Close_Button_Label}" type="button" /><input id="dialogCancelButtonTop" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.echosign_dev1__cancel_button_label}" class="btn" name="{!$Label.echosign_dev1__cancel_button_label}" onclick="hideConsolePanel()" title="{!$Label.echosign_dev1__cancel_button_label}" type="button" /></div><iframe height="600"px width="'+frameWidth+'"px frameborder="no" id="popup" style="border:0;" src="'+myURL+'"></iframe><div class="buttons"><input id="dialogCloseButton" style="display: none; margin-bottom: 20px; margin-top: 10px; margin-left: auto; margin-right: auto;" value="{!$Label.Close_Button_Label}" class="btn" name="{!$Label.Close_Button_Label}" onclick="hideConsolePanel()" title="{!$Label.Close_Button_Label}" type="button" /><input id="dialogCancelButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.echosign_dev1__cancel_button_label}" class="btn" name="{!$Label.echosign_dev1__cancel_button_label}" onclick="hideConsolePanel()" title="{!$Label.echosign_dev1__cancel_button_label}" type="button" /></div>';
                            document.getElementById('viewAgreementConsolePanel').innerHTML = mySRC;
                            document.getElementById('viewAgreementConsolePanel').style.display = 'block';
                            document.getElementById('{!$Component.agreementPanel}').style.display = 'none';   
                        } else if( {!isFrameActionWindowType} ) {
                            var mySRC;
                            mySRC = '<iframe height="'+height+'"px width="'+frameWidth+'"px frameborder="no" id="popup" style="border:0;" src="'+myURL+'"></iframe><div class="buttons"><input id="dialogCloseButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.Close_Button_Label}" class="btn" name="{!$Label.Close_Button_Label}" onclick="box.cancel()" title="{!$Label.Close_Button_Label}" type="button" /><input id="dialogCancelButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.echosign_dev1__cancel_button_label}" class="btn" name="{!$Label.echosign_dev1__cancel_button_label}" onclick="box.cancel()" title="{!$Label.echosign_dev1__cancel_button_label}" type="button" /></div>';
                            box.setContentInnerHTML(mySRC);
                            box.show();
                        } else if( isIosMobile && isFrameUrlMobile(myURL) ) {
                            var mySRC = '<iframe height="'+height+'"px width="'+frameWidth+'"px frameborder="no" id="popup" style="border:0;" src="'+myURL+'"></iframe><div class="buttons"><input id="dialogCloseButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.Close_Button_Label}" class="btn" name="{!$Label.Close_Button_Label}" onclick="box.cancel()" title="{!$Label.Close_Button_Label}" type="button" /><input id="dialogCancelButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.echosign_dev1__cancel_button_label}" class="btn" name="{!$Label.echosign_dev1__cancel_button_label}" onclick="box.cancel()" title="{!$Label.echosign_dev1__cancel_button_label}" type="button" /></div>';
                            box.setContentInnerHTML(mySRC);
                            box.show();
                        } else if(isIE6) {
                            echosignPopup(myURL);
                        } else { 
                            var mySRC;
                            mySRC = '<iframe height="'+height+'"px width="'+frameWidth+'"px frameborder="no" id="popup" style="border:0;" src="'+myURL+'"></iframe><div class="buttons"><input id="dialogCloseButton" style="display: none; margin-left: auto; margin-right: auto; width: 60px;" value="{!$Label.Close_Button_Label}" class="btn" name="{!$Label.Close_Button_Label}" onclick="box.cancel()" title="{!$Label.Close_Button_Label}" type="button" /><input id="dialogCancelButton" style="display: none; margin-left: auto; margin-right: auto;" value="{!$Label.echosign_dev1__cancel_button_label}" class="btn" name="{!$Label.echosign_dev1__cancel_button_label}" onclick="box.cancel()" title="{!$Label.echosign_dev1__cancel_button_label}" type="button" /></div>';
                            box.setContentInnerHTML(mySRC);
                            box.show();
                        }
                    }               
                                                              
                    function reloadPage() {
                        if( '{!JSENCODE(agreement.ReturnURL__c)}'!='' && !sendEnabled && !isErrorFromServer ) {
                            window.location.href = '{!JSENCODE(agreement.ReturnURL__c)}';
                         } else {
                            var reloadUrl = window.location.href;
                            try {
                                reloadUrl = stripOnloadActionParam(reloadUrl);
                            } catch(err) {
                            }
                            window.location.href = reloadUrl;
                         }
                    }
                    
                    function stripOnloadActionParam(reloadUrl) {
                        if( !getParam().onloadAction &&
                            !getParam().onloadaction ) {
                            return reloadUrl;   
                        }
                        
                        var convertedUrl = reloadUrl.replace(/&onloadAction=send/gi, '');
                        convertedUrl = convertedUrl.replace(/&onloadAction=remind/gi, '');
                        convertedUrl = convertedUrl.replace(/&onloadAction=view/gi, '');
                        convertedUrl = convertedUrl.replace(/&onloadAction=delete/gi, '');
                        convertedUrl = convertedUrl.replace(/&onloadAction=cancel/gi, '');
                        convertedUrl = convertedUrl.replace(/&onloadAction=update/gi, '');
                        
                        convertedUrl = convertedUrl.replace(/onloadAction=send&/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=remind&/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=view&/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=delete&/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=cancel&/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=update&/gi, '');
                        
                        convertedUrl = convertedUrl.replace(/onloadAction=send/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=remind/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=view/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=delete/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=cancel/gi, '');
                        convertedUrl = convertedUrl.replace(/onloadAction=update/gi, '');
                        
                        return convertedUrl;
                    }
                    
                    function getParam() {
                        var params = {};

                        if (location.search) {
                            var parts = location.search.substring(1).split('&');

                            for (var i = 0; i < parts.length; i++) {
                                var nv = parts[i].split('=');
                                if (!nv[0]) continue;
                                params[nv[0]] = nv[1] || true;
                            }
                        }
                        return params;
                    }
                    
                function echosignParameters(extraOptions) {
                    return jQuery.extend({ 
                      Agreement_ID: '{!JSENCODE(strID)}',
                      New_Record_ID: '{!JSENCODE(strNewID)}',
                      Version: '{! JSENCODE(strVersion) }',
                      namespace: '{! JSENCODE(strNamespace) }',
                      session: '{!$Api.Session_ID}',
                      organizationId: '{!$Organization.Id}',
                      server: '{!$Api.Partner_Server_URL_370}',
                      Status: '{!agreementStatus}',
                      LastEventId: '{!lastEventId}',
                      signerFields: '{!IF(NOT ISNULL(cusSettings.Override_Recipient_Field_List__c),cusSettings.Override_Recipient_Field_List__c,JSENCODE(strNamespace)+"__Recipient_Addresses__c")}',
                      attachmentIds: '{!JSENCODE(agreement.Attachment_ID_Order__c)}',
                      mergeFields: '{!JSENCODE(strNamespace)}__Merge__c',
                      AdditionalOptions: '{!JSENCODE(agreement.AdditionalOptions__c)}'
                    }, extraOptions);
                }
                
                var ECHOSIGN_URL_BASE = '{! JSENCODE(strBaseURL) }';
                    
                function echosignUrl(subpath, extraOptions) {
                    return ECHOSIGN_URL_BASE + subpath + '?' + jQuery.param(echosignParameters(extraOptions));
                }                                                   
                
                function checkAndroidPopup() {
                    try {
                        var popupStr = popup + ' ';
                    } catch(err) {
                        if(pageHasError=='false') {
                            reloadPage();
                        }
                        return;
                    }
                    setTimeout("checkAndroidPopup()",1000);
                }
                  
                function checkPopup() {
                    if (!popup || popup.closed) {
                        if(pageHasError=='false')
                            reloadPage();
                        return;
                    }
                    
                    if( isSfdcApp ) {
                        setTimeout("reloadPage()",2000);
                    }
                    
                    setTimeout("checkPopup()",1000);
                }
                                
                function echosignPopup(url) {
                    //12.30.10--use floating div//
                    if( {!isWindowActionWindowType} ) {
                        popup = window.open(url, 'EchoSign', 'menubar=0,width=960,height=620,toolbar=0,location=0');
                        checkPopup();
                    } else if( {!isFrameActionWindowType} ) {
                        myShow(url);
                    } else if(isIE6){
                        if( isAndroid ) {
                            popup = window.open(url, 'EchoSign');
                            checkAndroidPopup();
                        } else if( isIosMobile && isFrameUrlMobile(url) ) {
                            myShow(url);
                        } else {
                            popup = window.open(url, 'EchoSign', 'menubar=0,width=960,height=620,toolbar=0,location=0');
                            checkPopup();
                        }
                    }else{
                        myShow(url);
                    }
                }
                
                                  
                function createAgreement() {
                    if (sendEnabled) {
                        sendEnabled = false;                  
                        sendAgreement();
                    }
                }
                      
                function updateStatus() {
                    echosignPopup('{!$Page.RefreshStatus}?id={!JSENCODE(strID)}');        
                    doUnsetOnLoadActionField();
                    
                    if( sforce.console.isInConsole() ) {
                        setTimeout("hideConsolePanel()",3000);
                    }
                }
                  
                function sendReminder() {
                    if( isIosMobile ) {
                        showReminderSpinner();
                    } else {
                        echosignPopup('{!$Page.SendReminder}?id={!JSENCODE(strID)}');
                    }
                    doSendReminder();                                   
                }
                  
                function viewAgreement() {
                    echosignPopup( '{!viewAgreementUrl}' );
                    showDialogCloseButton();                
                    doUnsetOnLoadActionField();
                }
                
                function deleteAgreement() {
                    deleteAgreement('', '');
                } 
                  
                function deleteAgreement(reason, notify) {
                    if( isIosMobile ) {
                        showDeleteSpinner();
                    } else {              
                        echosignPopup('{!$Page.DeleteAgreement}?id={!JSENCODE(strID)}&deleteButton=true');
                    }
                    doDeleteAgreement(reason, notify);                       
                }
                
                function cancelAgreement(reason, notify) {
                    if( isIosMobile ) {
                        showCancelSpinner();
                    } else {                     
                        echosignPopup('{!$Page.CancelAgreement}?id={!JSENCODE(strID)}');
                    }
                    doCancelAgreement(reason, notify);                     
                }
        
                function confirmation() {
                    return confirm('{! JSENCODE($Label.Confirm_Prompt) }');
                }         
                
                var isClicked = false;     
                </script>                
            </apex:pageBlockSection>
            <apex:pageBlockSection title="{!$Label.echosign_dev1__security_options_section_header}" columns="1" id="SecurityOptionsSection" rendered="{! NOT( AND( isDisableKba, isDisableWebIdentity, isDisableSignPassword, isDisableViewPassword ) ) && NOT(agreement.Sender_Signs_Only__c) }">
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="allDetailPanel" rendered="{! NOT(isEnableSeparateSignerIdentity) && ( OR( NOT(isDisableSignPassword), NOT(isDisableKba), NOT(isDisableWebIdentity) ) ) && NOT(isOneSignerIdentityMethod) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableAllSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }">
                        <apex:actionSupport event="onclick" rerender="allDetailPanel,passwordPanel" />
                    </apex:inputCheckbox>
                    <apex:outputPanel rendered="{! hasBeenSent && isEnableAllSignerIdentityMethod }">
                        <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{! hasBeenSent && NOT(isEnableAllSignerIdentityMethod) }">
                        <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.Verify_Signer_Identity} &nbsp;&nbsp;&nbsp;</apex:outputLabel>
                    <apex:outputPanel rendered="{!isEnableAllSignerIdentityMethod}">
                        <apex:selectRadio id="allSignerIdentityList" value="{!allSignerIdentityMethod}" layout="pageDirection" disabled="{! hasBeenSent || isReadOnlySecurityOptions }">
                            <apex:selectOptions value="{!signerIdentityMethods}"/>
                            <apex:actionSupport event="onchange" oncomplete="showPassword();" rerender="passwordPanel"/>
                        </apex:selectRadio>                                   
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="externalDetailPanel" rendered="{! isEnableSeparateSignerIdentity && ( OR( NOT(isDisableSignPassword), NOT(isDisableKba), NOT(isDisableWebIdentity) ) ) && NOT(isOneSignerIdentityMethod) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableExternalSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }">
                        <apex:actionSupport event="onclick" rerender="externalDetailPanel,passwordPanel" />
                    </apex:inputCheckbox>
                    <apex:outputPanel rendered="{! hasBeenSent && isEnableExternalSignerIdentityMethod }">
                        <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{! hasBeenSent && NOT(isEnableExternalSignerIdentityMethod) }">
                        <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__verify_external_signer_identity}</apex:outputLabel>
                    <apex:outputPanel rendered="{!isEnableExternalSignerIdentityMethod}">
                        <apex:selectRadio id="externalSignerIdentityList" styleClass="adobePrimaryText" value="{!externalSignerIdentityMethod}" layout="pageDirection" disabled="{! hasBeenSent || isReadOnlySecurityOptions }">
                            <apex:selectOptions value="{!signerIdentityMethods}"/>
                            <apex:actionSupport event="onchange" oncomplete="showPassword();" rerender="passwordPanel"/>
                        </apex:selectRadio>                                   
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="internalDetailPanel" rendered="{! isEnableSeparateSignerIdentity && ( OR( NOT(isDisableSignPassword), NOT(isDisableKba), NOT(isDisableWebIdentity) ) ) && NOT(isOneSignerIdentityMethod) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableInternalSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }">
                        <apex:actionSupport event="onclick" rerender="internalDetailPanel,passwordPanel" />
                    </apex:inputCheckbox>
                    <apex:outputPanel rendered="{! hasBeenSent && isEnableInternalSignerIdentityMethod }">
                        <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{! hasBeenSent && NOT(isEnableInternalSignerIdentityMethod) }">
                        <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.Verify_Internal_Signer_Identity} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</apex:outputLabel>
                    <apex:outputPanel rendered="{!isEnableInternalSignerIdentityMethod}">&nbsp;
                        <apex:selectRadio id="internalSignerIdentityList" styleClass="adobePrimaryText" value="{!internalSignerIdentityMethod}" layout="pageDirection" disabled="{! hasBeenSent || isReadOnlySecurityOptions }">
                            <apex:selectOptions value="{!signerIdentityMethods}"/>
                            <apex:actionSupport event="onchange" oncomplete="showPassword();" rerender="passwordPanel"/>
                        </apex:selectRadio>                                   
                    </apex:outputPanel>
                </apex:outputPanel>
                    
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionPasswordDetailPanel" rendered="{! isEnableSeparateSignerIdentity && ( NOT(isDisableSignPassword) && isDisableKba && isDisableWebIdentity ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableExternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableExternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_password}</apex:outputLabel>
                    </apex:outputPanel>
                    <br/>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableInternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableInternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_password}</apex:outputLabel>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!notYetSent}">
                        <apex:inputCheckbox value="{!isEnableExternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }">
                            <apex:actionSupport event="onclick" oncomplete="showPassword();" rerender="passwordPanel"/>
                        </apex:inputCheckbox>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_password}</apex:outputLabel>
                        <br/>
                        <apex:inputCheckbox value="{!isEnableInternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }">
                            <apex:actionSupport event="onclick" oncomplete="showPassword();" rerender="passwordPanel"/>
                        </apex:inputCheckbox>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_password}</apex:outputLabel>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionAllPasswordDetailPanel" rendered="{! NOT(isEnableSeparateSignerIdentity) && ( NOT(isDisableSignPassword) && isDisableKba && isDisableWebIdentity ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableOneSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }">
                        <apex:actionSupport event="onclick" rerender="passwordPanel" />
                    </apex:inputCheckbox>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__signer_password}</apex:outputLabel>
                </apex:outputPanel>
                
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionKbaDetailPanel" rendered="{! isEnableSeparateSignerIdentity && ( isDisableSignPassword && NOT(isDisableKba) && isDisableWebIdentity ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableExternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableExternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_kba}</apex:outputLabel>
                    </apex:outputPanel>
                    <br/>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableInternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableInternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_kba}</apex:outputLabel>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!notYetSent}">
                        <apex:inputCheckbox value="{!isEnableExternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }"/>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_kba}</apex:outputLabel>
                        <br/>
                        <apex:inputCheckbox value="{!isEnableInternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }"/>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_kba}</apex:outputLabel>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionAllKbaDetailPanel" rendered="{! NOT(isEnableSeparateSignerIdentity) && ( isDisableSignPassword && NOT(isDisableKba) && isDisableWebIdentity ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableOneSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }"/>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__signer_kba}</apex:outputLabel>
                </apex:outputPanel>
                
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionWebIdentityDetailPanel" rendered="{! isEnableSeparateSignerIdentity && ( isDisableSignPassword && isDisableKba && NOT(isDisableWebIdentity) ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableExternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableExternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_identity}</apex:outputLabel>
                    </apex:outputPanel>
                    <br/>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableInternalOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableInternalOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_identity}</apex:outputLabel>
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!notYetSent}">
                        <apex:inputCheckbox value="{!isEnableExternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }"/>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__external_signer_identity}</apex:outputLabel>
                        <br/>
                        <apex:inputCheckbox value="{!isEnableInternalOneSignerIdentityMethod}" disabled="{! isReadOnlySecurityOptions }"/>
                        <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__internal_signer_identity}</apex:outputLabel>
                    </apex:outputPanel>
                </apex:outputPanel>
                <apex:outputPanel title="{!$Label.echosign_dev1__verify_identity_tooltip}" id="oneOptionAllWebIdentityDetailPanel" rendered="{! NOT(isEnableSeparateSignerIdentity) && ( isDisableSignPassword && isDisableKba && NOT(isDisableWebIdentity) ) && NOT(isEnableRecipientSecurityOptions) }">
                    <apex:inputCheckbox value="{!isEnableOneSignerIdentityMethod}" rendered="{!notYetSent}" disabled="{! isReadOnlySecurityOptions }"/>
                    <apex:outputPanel rendered="{! hasBeenSent }">
                        <apex:outputPanel rendered="{! isEnableOneSignerIdentityMethod }">
                            <img src="{!$Resource.CheckboxChecked}" alt="{!$Label.Checked_Tooltip}" width="21" height="16" title="{!$Label.Checked_Tooltip}" />
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{! NOT(isEnableOneSignerIdentityMethod) }">
                            <img src="{!$Resource.CheckboxUnchecked}" alt="{!$Label.Unchecked_Tooltip}" width="21" height="16" title="{!$Label.Unchecked_Tooltip}" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__signer_identity}</apex:outputLabel>
                </apex:outputPanel>
                
                <apex:outputPanel title="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__PasswordProtectPDF__c.inlineHelpText}" rendered="{! NOT(isDisableViewPassword) }">
                    <apex:inputField id="PasswordProtectPDF" value="{!agreement.echosign_dev1__PasswordProtectPDF__c}" onchange="showPassword();" rendered="{! notYetSent && !isReadOnlySecurityOptions }">
                    </apex:inputField>
                    <apex:outputField value="{!agreement.echosign_dev1__PasswordProtectPDF__c}" rendered="{! hasBeenSent || isReadOnlySecurityOptions }" />
                    <apex:outputLabel styleClass="adobePrimaryText">{!$Label.echosign_dev1__password_protect_label}</apex:outputLabel>                     
                    </apex:outputPanel>
                    <apex:outputPanel id="passwordPanel">           
                        <apex:outputPanel id="passwordPanel2" style="display:none;">
                            <script>  
                                if( ( {!notYetSent} || {!inPresend} ) && 
                                    ( {! isEnableAllSignerIdentityMethod && allSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) }
                                        || {! isEnableExternalSignerIdentityMethod && externalSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) } 
                                        || {! isEnableInternalSignerIdentityMethod && internalSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) }
                                        || {! agreement.echosign_dev1__PasswordProtectPDF__c }
                                        || {! ( NOT(isDisableSignPassword) && isDisableKba && isDisableWebIdentity && ( isEnableOneSignerIdentityMethod || isEnableExternalOneSignerIdentityMethod || isEnableInternalOneSignerIdentityMethod ) ) && NOT(isEnableRecipientSecurityOptions) } ) ) {
                                    document.getElementById('{!$Component.passwordPanel2}').style.display = '';
                                } else {
                                    document.getElementById('{!$Component.passwordPanel2}').style.display = 'none';
                                }
                                
                                function showPassword() {
                                    if( ( {!notYetSent} || {!inPresend} ) && 
                                        ( {! isEnableAllSignerIdentityMethod && allSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) }
                                        || {! isEnableExternalSignerIdentityMethod && externalSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) } 
                                        || {! isEnableInternalSignerIdentityMethod && internalSignerIdentityMethod = 'Password to sign agreement' && NOT(isEnableRecipientSecurityOptions) }
                                        || {! ( NOT(isDisableSignPassword) && isDisableKba && isDisableWebIdentity && ( isEnableOneSignerIdentityMethod || isEnableExternalOneSignerIdentityMethod || isEnableInternalOneSignerIdentityMethod ) ) && NOT(isEnableRecipientSecurityOptions) }
                                        || ( document.getElementById('{!$Component.PasswordProtectPDF}') && document.getElementById('{!$Component.PasswordProtectPDF}').checked ) ) ) {
                                        document.getElementById('{!$Component.passwordPanel2}').style.display='';
                                    } else {
                                        document.getElementById('{!$Component.passwordPanel2}').style.display='none';
                                    }
                                }                               
                            </script>                       
                            <apex:outputPanel id="passwordPanelInner">
                                <apex:outputLabel style="padding-right: 8px;" styleClass="adobeFieldLabelLeft adobePrimaryText">{!$Label.echosign_dev1__password_prompt}</apex:outputLabel>
                                <apex:outputPanel styleClass="requiredInput">  
                                    <apex:outputPanel styleClass="requiredBlock"/>                        
                                    <apex:inputSecret value="{!password}" id="password" redisplay="true" disabled="{! isReadOnlySecurityOptions }"/>
                                </apex:outputPanel>                             
                            </apex:outputPanel>
                            <apex:outputPanel id="confirmPasswordInner">
                                <apex:outputLabel style="padding-right: 8px;" styleClass="adobeFieldLabelLeft adobePrimaryText">{!$Label.echosign_dev1__password_confirm_prompt}</apex:outputLabel>
                                <apex:outputPanel styleClass="requiredInput">
                                    <apex:outputPanel styleClass="requiredBlock"/>  
                                    <apex:inputSecret value="{!confirmPassword}" id="confirmPassword" redisplay="true" disabled="{! isReadOnlySecurityOptions }"/>
                                </apex:outputPanel>                         
                            </apex:outputPanel>                 
                        </apex:outputPanel>
                    </apex:outputPanel>
            </apex:pageBlockSection>
        </apex:pageBlock>
        
        <apex:pageBlock id="additionalFields" title="{!$Label.echosign_dev1__additional_fields_section_header}" rendered="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.FieldSets.echosign_dev1__AdditionalFieldSet.size != 0}">
            <apex:pageBlockSection columns="1">
                <apex:repeat value="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.FieldSets.echosign_dev1__AdditionalFieldSet}" var="field">
                    <apex:outputField value="{!agreement[field]}" rendered="{! !notYetSent || isReadOnlyFieldSet }" />
                    <apex:inputField value="{!agreement[field]}" rendered="{! notYetSent && !isReadOnlyFieldSet }">
                        <apex:actionSupport event="onchange" rerender="errorPanel,errorPanelBottom" />
                    </apex:inputField>     
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:pageBlock id="attachmentSection" title="{!$Label.echosign_dev1__attachments_section_header}" >
            <script>
                styleButtons();
                initSortable();
            </script>
            
            <apex:pageBlockSection id="attachmentsBlockSection" columns="1">
          
                    <apex:outputPanel layout="block">
                        <ul id="sortableHeader" style="width: 1050px; float: left; list-style: none;">
                            <li>
                                <apex:outputPanel layout="inline" style="margin-left: 1px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__attachments_title_column_label}" />
                                </apex:outputPanel>
                                <apex:outputPanel layout="inline" style="margin-left: 550px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__attachments_modified_column_label}" />
                                </apex:outputPanel>
                                <apex:outputPanel layout="inline" style="margin-left: 80px;">
                                    <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__attachments_created_column_label}" />
                                </apex:outputPanel>
                            </li>
                        </ul>
                        <ul id="sortableDocuments" style="width: 1100px; float: left;">
                            <apex:repeat value="{!attachmentWrappers}" var="attachmentWrapper" id="documentItems">
                                <li id="documentRowItem{!attachmentWrapper.index}" class="ui-state-default">
                                    <apex:outputPanel rendered="{! AND( NOT(hasBeenSent), NOT(isDisableSortAttachments) ) }" style="background-position: inherit; background-image: url('{!$Resource.echosign_dev1__GrabberIcon}'); padding-top: 12px;" styleClass="ui-icon ui-icon-arrowthick-2-n-s adobeGrabIcon" />
                                    <apex:outputPanel layout="inline" style="padding-left: 20px; padding-top: 4px; width: 600px;">
                                        <apex:image title="{!$Label.echosign_dev1__library_document_template_tooltip}" style="margin-top: -3px; vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!$Resource.echosign_dev1__LibraryDocumentTemplate}" rendered="{! attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer }"/>
                                        <apex:image title="{!$Label.echosign_dev1__library_layer_template_tooltip}" style="margin-top: -3px; vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!$Resource.echosign_dev1__LibraryFieldsTemplate}" rendered="{! attachmentWrapper.isFormFieldLayer && !attachmentWrapper.isDocument }"/>
                                        <apex:image title="{!$Label.echosign_dev1__library_document_and_layer_template_tooltip}" style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!$Resource.echosign_dev1__LibraryDocumentTemplate}" rendered="{! attachmentWrapper.isDocument && attachmentWrapper.isFormFieldLayer }"/>
                                        <apex:image style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!URLFOR($Resource.echosign_dev1__s1doctype,'s1doctypes/pdf_120.png')}" rendered="{! !attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer && attachmentWrapper.extension = 'pdf' }"/>
                                        <apex:image style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!URLFOR($Resource.echosign_dev1__s1doctype,'s1doctypes/word_120.png')}" rendered="{! !attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer && ( attachmentWrapper.extension = 'doc' || attachmentWrapper.extension = 'docx' ) }"/>
                                        <apex:image style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!URLFOR($Resource.echosign_dev1__s1doctype,'s1doctypes/ppt_120.png')}" rendered="{! !attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer && ( attachmentWrapper.extension = 'ppt' || attachmentWrapper.extension = 'pptx' ) }"/>
                                        <apex:image style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!URLFOR($Resource.echosign_dev1__s1doctype,'s1doctypes/excel_120.png')}" rendered="{! !attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer && ( attachmentWrapper.extension = 'xls' || attachmentWrapper.extension = 'xlsx' ) }"/>
                                        <apex:image style="vertical-align: text-bottom; padding-right: 5px; height: 18px;" value="{!URLFOR($Resource.echosign_dev1__s1doctype,'s1doctypes/image_120.png')}" rendered="{! !attachmentWrapper.isDocument && !attachmentWrapper.isFormFieldLayer && ( attachmentWrapper.extension = 'jpeg' || attachmentWrapper.extension = 'jpg' || attachmentWrapper.extension = 'png' || attachmentWrapper.extension = 'gif' ) }"/>     
                                        <apex:outputText style="word-wrap: break-word;" styleClass="adobePrimaryText documentTitleText" value="{!attachmentWrapper.attachment.Name}" rendered="{! isDisableViewAttachments && attachmentWrapper.attachment != null }" />
                                        <apex:commandLink title="{!$Label.echosign_dev1__view_attachment_tooltip}" style="color: #3278BE;" styleClass="adobeLinkText" onclick="window.open('/servlet/servlet.FileDownload?file={!attachmentWrapper.attachment.Id}','viewattachment'); return false;" rendered="{! NOT(isDisableViewAttachments) && ( attachmentWrapper.attachment != null ) }" value="{!attachmentWrapper.attachment.Name}" />
                                        <apex:outputText style="word-wrap: break-word;" styleClass="adobePrimaryText documentTitleText" value="{!attachmentWrapper.libraryTemplate.Name}" rendered="{! attachmentWrapper.libraryTemplate != null }" />
                                    </apex:outputPanel>
                                    <apex:outputPanel layout="inline" style="margin-left: 620px; padding-top: 5px; width: 20%;">
                                        <apex:outputPanel layout="inline" style="padding-top: 5px;" styleClass="adobePrimaryText" rendered="{! attachmentWrapper.attachment != null }">
                                            <apex:outputText value="{0,date,yyyy.MM.dd HH:mm:ss}">
                                                <apex:param value="{!attachmentWrapper.attachment.LastModifiedDate}" />
                                            </apex:outputText>
                                        </apex:outputPanel>
                                        <apex:outputPanel layout="inline" style="padding-top: 5px;" styleClass="adobePrimaryText" rendered="{! attachmentWrapper.libraryTemplate != null }">
                                            <apex:outputText value="{0,date,yyyy.MM.dd HH:mm:ss}">
                                                <apex:param value="{!attachmentWrapper.libraryTemplate.LastModifiedDate}" />
                                            </apex:outputText>
                                        </apex:outputPanel>
                                    </apex:outputPanel>
                                    <apex:outputPanel layout="inline" style="margin-left: 810px; padding-top: 5px; width: 20%;">
                                        <apex:outputPanel layout="none">
                                            <apex:outputPanel layout="inline" style="padding-top: 5px;" styleClass="adobePrimaryText" rendered="{! attachmentWrapper.attachment != null }">
                                                <apex:outputText value="{!attachmentWrapper.attachment.CreatedBy.Name}"/>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="inline" style="padding-top: 5px;" styleClass="adobePrimaryText" rendered="{! attachmentWrapper.libraryTemplate != null }">
                                                <apex:outputText value="{!attachmentWrapper.libraryTemplate.CreatedBy.Name}"/>
                                            </apex:outputPanel>
                                        </apex:outputPanel>
                                    </apex:outputPanel>
                                    <apex:outputPanel layout="inline" style="margin-left: 1020px; padding-top: 5px;">
                                        <apex:outputPanel style="padding-top: 5px;" >
                                            <apex:commandButton action="{!onDeleteAttachment}" title="{!$Label.echosign_dev1__delete_attachment_tooltip}" image="{!$Resource.echosign_dev1__AdobeTrashIcon}" rendered="{! notYetSent && NOT(isDisableDeleteAttachments) }" onclick="if (!confirm('{! JSENCODE($Label.Confirm_Prompt) }')){ return false; }else{ }" status="DeletingAttachmentStatus" rerender="attachmentSection,errorPanel,errorPanelBottom,floatingDiv" style="margin-top: -10px; background: transparent; border-width: 0px;">
                                                <apex:param assignTo="{!selectedAttachmentIndex}" value="{!attachmentWrapper.index}" name="selectedAttachmentIndex"/>
                                            </apex:commandButton>
                                        </apex:outputPanel>
                                    </apex:outputPanel>
                                </li>
                            </apex:repeat>
                        </ul>
                    </apex:outputPanel>
                    
                    <apex:outputPanel id="attachmentsActionsSection"  layout="block">       
                      <apex:outputpanel rendered="{!!hasBeenSent}">
                        <apex:commandButton id="uploadAgreementLink" onclick="if (isClicked) { return false; } isClicked = true;" action="{!addAttachment}" rerender="AgreementFormId" value="{!$Label.echosign_dev1__upload_button_label}" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" rendered="{! !hasBeenSent && NOT(isDisableUploadAttachments) }"/>
                        
                        <apex:outputpanel styleClass="adobePrimaryText" rendered="{! NOT(isDisableUploadAttachments) && NOT(isDisableAttachAttachments)  }">&nbsp;<b>{!$Label.Or_Attachments_Label}</b> {!$Label.Select_From_Attachments_Label}:</apex:outputpanel>
                        <apex:commandLink style="padding-left: 5px; color: #3278BE;" styleClass="adobeLinkText" rerender="AgreementFormId" rendered="{! !hasBeenSent && NOT(isDisableAttachAttachments) }" value="{!$Label.echosign_dev1__attachment_salesforce_documents_label}" action="{!addDocument}" />
                        
                        <apex:outputpanel styleClass="adobePrimaryText" rendered="{! NOT(isDisableAttachAttachments) && NOT(isDisableContentAttachments)  }">&nbsp;<b>|</b></apex:outputpanel>
                        <apex:commandLink style="padding-left: 5px; color: #3278BE;" styleClass="adobeLinkText" rerender="AgreementFormId" rendered="{! !hasBeenSent && NOT(isDisableContentAttachments) }" value="{!$Label.echosign_dev1__attachment_salesforce_content_label}" action="{!addContent}" />
                                        
                        <apex:outputpanel styleClass="adobePrimaryText" rendered="{! NOT(isDisableContentAttachments) && isEnableLibraryAttachments  }">&nbsp;<b>|</b></apex:outputpanel>
                        <apex:commandLink style="padding-left: 5px; color: #3278BE;" styleClass="adobeLinkText" action="{!addLibrary}" rerender="libraryTemplateSelectorPanel" oncomplete="document.getElementById('{!$Component.agreementPanel}').style.display = 'none'; document.getElementById('{!$Component.libraryTemplateSelectorPanel}').style.display = 'block'; return false;" rendered="{! !hasBeenSent && isEnableLibraryAttachments }" value="{!$Label.echosign_dev1__attachment_salesforce_library_label}" />
                      </apex:outputpanel>
                    </apex:outputPanel>
                </apex:pageBlockSection>
        </apex:pageBlock>
        
        <apex:pageBlock title="{!$Label.echosign_dev1__attach_layer_template_section_header}" id="layerSection" rendered="{! isEnableLayersSection && notYetSent }" >
            <script>
                styleButtons();
            </script>
            <apex:pageBlockTable id="bFTablea" style="table-layout: fixed;" value="{!attachmentLayerWrappers}" var="attachmentWrapper" columns="4" columnsWidth="15%,45%,20%,20%">     
              <apex:column >
                <apex:facet name="header">{!$Label.echosign_dev1__attachments_action_column_label}</apex:facet>
                    <apex:commandButton action="{!onDeleteLayer}" title="{!$Label.echosign_dev1__delete_attachment_tooltip}" image="{!$Resource.echosign_dev1__ActionDelete}" rendered="{! notYetSent && NOT(isDisableDeleteAttachments) }" onclick="if (!confirm('{! JSENCODE($Label.Confirm_Prompt) }')){ return false; }else{ }" status="DeletingLayerStatus" rerender="layerSection,errorPanel,errorPanelBottom,floatingDiv" style="background:transparent;border-width:0px;margin-bottom:8px;margin-left:8px;">
                        <apex:param assignTo="{!selectedAttachmentIndex}" value="{!attachmentWrapper.index}" name="selectedAttachmentIndex"/>
                    </apex:commandButton>
                    <apex:actionStatus id="DeletingLayerStatus">
                        <apex:facet name="start">
                        <div class="waitingSearchDiv" style="width: 100%; height: 100%; display: ; opacity:.5;"></div>
                        </apex:facet>
                    </apex:actionStatus>                                   
              </apex:column>  
              <apex:column style="word-wrap: break-word;">        
                <apex:facet name="header">{!$Label.echosign_dev1__attachments_title_column_label}</apex:facet>
                <apex:image title="{!$Label.echosign_dev1__library_layer_template_tooltip}" style="vertical-align: text-bottom;" value="{!$Resource.echosign_dev1__LibraryFieldsTemplate}" />
                <apex:outputpanel >&nbsp;</apex:outputpanel>
                <apex:outputText value="{!attachmentWrapper.libraryTemplate.Name}" />
              </apex:column> 
              <apex:column >        
                <apex:facet name="header">{!$Label.echosign_dev1__attachments_modified_column_label}</apex:facet>
                <apex:outputField value="{!attachmentWrapper.libraryTemplate.LastModifiedDate}" />
              </apex:column>                                   
              <apex:column >        
                <apex:facet name="header">{!$Label.echosign_dev1__attachments_created_column_label}</apex:facet>
                <apex:outputText value="{!attachmentWrapper.libraryTemplate.CreatedBy.Name}" />
              </apex:column> 
          </apex:pageBlockTable> 
          
          <apex:pageBlockSection id="layersActionsSection" columns="1">         
              <apex:outputpanel rendered="{!!hasBeenSent}">
                <apex:commandLink style="padding-left:5px; color: #3278BE;" styleClass="adobeLinkText" action="{!addLayer}" rerender="layerTemplateSelectorPanel" oncomplete="document.getElementById('{!$Component.agreementPanel}').style.display = 'none'; document.getElementById('{!$Component.layerTemplateSelectorPanel}').style.display = 'block'; return false;" rendered="{! !hasBeenSent && NOT(isDisableLayerAttachments) && ( attachmentLayerWrappers.size == 0 ) }" value="{!$Label.echosign_dev1__attachment_library_layer_label}" />
              </apex:outputpanel>
          </apex:pageBlockSection>
        </apex:pageBlock>
        
        <!-- <apex:pageBlock title="{!$Label.Child_Agreements_Section_Header}" rendered="{! hasBeenSent && isMegaSignAgreementType }">
            <apex:pageBlockTable value="{!childAgreements}" var="childAgreement">
                <apex:column >
                    <apex:facet name="header">{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.Name.label}</apex:facet>
                    <a href="/{!childAgreement.Id}"><apex:outputField value="{!childAgreement.Name}" /></a>
                </apex:column>
                <apex:column value="{!childAgreement.Status__c}" />
                <apex:column value="{!childAgreement.Recipient__c}" />
                <apex:column value="{!childAgreement.Recipient_Lead__c}" />
                <apex:column value="{!childAgreement.Recipient_User__c}" />
                <apex:column value="{!childAgreement.More_Recipients__c}" />
            </apex:pageBlockTable>
        </apex:pageBlock> -->       
                
        <apex:pageBlock title="{!$Label.echosign_dev1__agreement_events_section_header}" rendered="{!hasBeenSent}">
            <apex:pageBlockTable headerClass="adobePrimaryBoldText" value="{!agreementEvents}" var="agreementEvent">
                <apex:column styleClass="adobePrimaryText" value="{!agreementEvent.echosign_dev1__Date__c}" />
                <apex:column styleClass="adobePrimaryText" value="{!agreementEvent.echosign_dev1__Description__c}" />
            </apex:pageBlockTable>
        </apex:pageBlock>
        
        <apex:pageBlock title="{! IF(isApproved, $Label.Approved_Agreement_Section_Header, $Label.Signed_Agreement_Section_Header) }" rendered="{!hasSignedAgreements}">
            <apex:pageBlockTable value="{!agreementSigned}" var="signedAgreement">
                <apex:column >
                    <img src="{!signedAgreement.echosign_dev1__ImageUrl__c}"/>
                </apex:column>
            </apex:pageBlockTable>
        </apex:pageBlock>
        <apex:pageBlock title="{!$Label.echosign_dev1__actions_section_header}" helpTitle="{!$Label.echosign_dev1__agreement_help_label}" helpUrl="{!$Page.echosign_dev1__EchoSignUserGuide}" id="actionPageBlock455">
            <apex:pageBlockSection id="buttonsSection" columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputPanel id="errorPanelBottom">
                        <apex:outputPanel style="text-align: left;" styleClass="errorMsg" layout="block" rendered="{!pageHaserror}">
                            <strong>{!$Label.echosign_dev1__correct_error_notice} </strong>
                            <script>
                                if (popup && !popup.closed) { popup.close(); }
                                if( isIosMobile ) { hideSpinner(); }
                                //salesforceJQuery('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementButtonImage}').show();
                                //salesforceJQuery('{!$Component.AgreementFormId.actionPageBlock.buttonsSection.buttons.sendAgreementButtonDisabled}').hide();                                            
                            </script>                                 
                            <apex:messages styleClass="pbError" style="text-align: left;" />   
                        </apex:outputPanel>            
                        <apex:outputPanel rendered="{!!pageHaserror}">
                            <apex:pagemessages />
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!NOT(hasBeenSent) && LEN(errorMsg) > 0}">
                    <apex:outputText >
                        <apex:image url="{!$Resource.echosign_dev1__ErrorIcon}"/>
                        <apex:outputPanel styleClass="errorMsg"><b>{!errorMsg}</b></apex:outputPanel>
                    </apex:outputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!hasBeenSent}">
                    <apex:outputText >          
                    <apex:outputText >
                        <apex:outputText styleClass="adobePrimaryBoldText" value="{!$Label.echosign_dev1__agreement_status_label}"/>
                        <apex:outputText styleClass="adobePrimaryBoldText">:</apex:outputText>
                        <apex:outputText styleClass="adobePrimaryText" style="margin-left: 10px;" value="{!agreementStatusVisible}"/>
                        <!-- uncomment below and remove above to fix 36744, once Amy approved -->
                        <!-- <apex:outputField value="{!agreement.echosign_dev1__Status__c}" /> -->
                    </apex:outputText>
                    </apex:outputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem id="buttons">
                    <apex:outputPanel >
                        <table width="100%">
                            <tr>
                                <td align="left">
                                    <apex:commandButton id="sendAgreementLink" value="{!$Label.echosign_dev1__send_button_label}" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" action="{!sendForSignature}" onclick="pageHasError='false'; if( isIosMobile ) { showSpinner(); } else { myShow('{!$Page.echosign_dev1__SendForSignature}'); }" oncomplete="onComplete()" rerender="errorPanel,agreementDetailsOP,AgreementOptionsSection,recipientsSection,myPanel2" rendered="{!IF( OR(notYetSent,inPresend) && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Send_Agreement__c),'true','false')}"/>  
                                    <apex:image id="sendAgreementButtonDisabled" url="{!$Resource.echosign_dev1__SendAgreementButtonDisabled}" styleClass="echo-button" style="display:none;" rendered="{!IF(notYetSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Send_Agreement__c),'true','false')}" />
                                    <apex:commandButton id="saveAgreementLink" oncomplete="hideInlineError(); initListeners();" onclick="if (isClicked) { return false; } isClicked = true;" value="{!$Label.echosign_dev1__save_agreement_button_label}" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" action="{!saveWithoutSending}" rendered="{!IF(notYetSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Save_Agreement__c),'true','false')}" rerender="AgreementFormId,attachmentSection"/>
                                    <apex:commandButton id="updateAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__update_agreement_button_label}" rendered="{!IF(applicableForUpdate && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Update_Status__c),'true','false')}" onclick="updateStatus(); return false;" />                
                                    <apex:commandButton id="remindAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__remind_agreement_button_label}" rendered="{!IF(inProgress && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Send_Reminder__c),'true','false')}" onclick="sendReminder(); return false;" /> 
                                    <apex:commandButton id="viewAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__view_agreement_button_label}" rendered="{!IF(hasBeenSent && NOT(isSendInProgress) && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__View_Agreement__c),'true','false')}"  action="{!getViewAgreementUrl}" oncomplete="if( !{!pageHasError} ) { viewAgreement(); } return false;" rerender="errorPanel,errorPanelBottom,AgreementOptionsSection"/>
                                </td>
                                <td align="right">
                                    <apex:commandButton id="deleteAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__delete_agreement_button_label}" rendered="{!IF(hasBeenSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Delete_Agreement__c),'true','false')}" onclick="showRemoveAgreementDialog(); return false;" />
                                    <apex:commandButton id="cancelAgreement" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__cancel_agreement_button_label}" rendered="{!IF(applicableForCancel && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Cancel_Agreement__c),'true','false')}" onclick="showCancelAgreementDialog(); return false;" />
                                    <apex:commandButton id="cancelAgreementLink" style="filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3287D2', endColorstr='#3278BE',GradientType=0 );" styleClass="echoSignButton" value="{!$Label.echosign_dev1__cancel_button_label}" action="{!cancelDraft}" rendered="{!IF(notYetSent && (ISNULL(cusToolbarSettings) || cusToolbarSettings.echosign_dev1__Cancel_Draft__c),'true','false')}"/>
                                </td>
                            </tr>
                        </table>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock> 
    </apex:form>
    
    <script>
        styleButtons();
    </script>
    
    </apex:outputpanel>
    
    <apex:outputPanel id="libraryTemplateSelectorPanel" style="display: none;">
<div id="documentLibrariesSection" class="lookupTab FilePickerResultsFrame"> 
    <apex:form >
        <apex:sectionHeader title="{!$Label.echosign_dev1__attach_library_template_section_header}" />
        
        <apex:pageBlock id="pb">
            <apex:outputPanel ><h2>{!$Label.echosign_dev1__attach_library_template_section_sub_header}</h2><br/></apex:outputPanel>
            <apex:pageBlockSection id="buttonsSection" columns="1">
                <apex:pageBlockSectionItem >   
                    <apex:panelGrid columns="2" id="theGrid">
                        <apex:commandButton action="{!saveLibraryDocuments}" rerender="attachmentSection,agreementDetailsOP,AgreementFormTitleId" oncomplete="document.getElementById('{!$Component.libraryTemplateSelectorPanel}').style.display = 'none'; document.getElementById('{!$Component.agreementPanel}').style.display = 'block'; return false;" value="{!$Label.echosign_dev1__save_button_label}" disabled="{!libraryController.isSaveDisabled}"/>
                        <apex:commandButton action="{!cancelLibraryDocuments}" oncomplete="document.getElementById('{!$Component.libraryTemplateSelectorPanel}').style.display = 'none'; document.getElementById('{!$Component.agreementPanel}').style.display = 'block'; return false;" value="{!$Label.echosign_dev1__cancel_button_label}"/>
                    </apex:panelGrid>        
                </apex:pageBlockSectionItem>                
            </apex:pageBlockSection>
            
            <apex:outputpanel layout="block" >        
                <apex:pageBlockTable id="documentLibrariesTable" value="{!libraryController.libraryTemplateWrappers}" rowClasses="firstHeaderRow" var="libraryTemplateWrapper" columns="3" width="100%">
                    <apex:column width="20px">
                        <apex:facet name="header"></apex:facet>
                        <apex:inputCheckbox value="{!libraryTemplateWrapper.isSelected}">
                                <apex:actionSupport event="onchange" action="{!libraryController.onSelectionChanged}" rerender="buttonsSection"/>
                                <apex:actionSupport event="onclick" action="{!libraryController.onSelectionChanged}" rerender="buttonsSection"/>
                        </apex:inputCheckbox>
                    </apex:column>              
                   <apex:column >
                        <apex:facet name="header">
                            <apex:outputPanel >
                                <apex:commandLink value="{!$ObjectType.echosign_dev1__Library_Template__c.fields.Name.label}" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                    <apex:param name="sortField" value="Name" assignTo="{!libraryController.sortField}"/>
                                </apex:commandLink>
                                <apex:image value="{!$Resource.echosign_dev1__SortDescArrow}" title="{!$Label.echosign_dev1__sort_descending_label}" rendered="{! libraryController.previousSortField = libraryController.sortField && libraryController.isSortedByName }">
                                    <apex:actionSupport event="onclick" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                        <apex:param name="sortField" value="Name" assignTo="{!libraryController.sortField}"/>
                                    </apex:actionSupport>
                                </apex:image>
                                <apex:image value="{!$Resource.echosign_dev1__SortAscArrow}" title="{!$Label.echosign_dev1__sort_ascending_label}" rendered="{! libraryController.previousSortField <> libraryController.sortField && libraryController.isSortedByName }">
                                    <apex:actionSupport event="onclick" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                        <apex:param name="sortField" value="Name" assignTo="{!libraryController.sortField}"/>
                                    </apex:actionSupport>
                                </apex:image>
                            </apex:outputPanel>
                        </apex:facet>
                        <apex:image title="{!$Label.echosign_dev1__library_document_template_tooltip}" style="vertical-align: text-bottom; height: 18px;" value="{!$Resource.echosign_dev1__LibraryDocumentTemplate}" />
                        &nbsp;<apex:outputText value="{!libraryTemplateWrapper.documentLibrary.name}"/>             
                  </apex:column>
                  <apex:column >
                    <apex:facet name="header">
                        <apex:outputPanel >
                            <apex:commandLink value="{!$ObjectType.echosign_dev1__Library_Template__c.fields.echosign_dev1__Last_Modified__c.label}" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryController.sortField}"/>
                            </apex:commandLink>
                            <apex:image value="{!$Resource.echosign_dev1__SortDescArrow}" title="{!$Label.echosign_dev1__sort_descending_label}" rendered="{! libraryController.previousSortField = libraryController.sortField && libraryController.isSortedByModifiedDate }">
                                <apex:actionSupport event="onclick" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                    <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryController.sortField}"/>
                                </apex:actionSupport>
                            </apex:image>
                            <apex:image value="{!$Resource.echosign_dev1__SortAscArrow}" title="{!$Label.echosign_dev1__sort_ascending_label}" rendered="{! libraryController.previousSortField <> libraryController.sortField && libraryController.isSortedByModifiedDate }">
                                <apex:actionSupport event="onclick" action="{!libraryController.doSort}" rerender="documentLibrariesTable">
                                    <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryController.sortField}"/>
                                </apex:actionSupport>
                            </apex:image>
                        </apex:outputPanel>
                    </apex:facet>
                    <apex:outputText value="{0, date, short}">
                        <apex:param value="{!libraryTemplateWrapper.documentLibrary.modifiedDate}"/>
                    </apex:outputText>
                  </apex:column>  
                </apex:pageBlockTable>
            </apex:outputpanel>
        </apex:pageBlock>
    </apex:form>
</div> 
    </apex:outputPanel>
    
    <apex:outputPanel id="layerTemplateSelectorPanel" style="display: none;">
<div id="documentLayersSection" class="lookupTab FilePickerResultsFrame"> 
    <apex:form >
        <apex:sectionHeader title="{!$Label.echosign_dev1__attach_layer_template_section_header}" />
        
        <apex:pageBlock id="pbLayers">
            <apex:outputPanel ><h2>{!$Label.echosign_dev1__attach_layer_template_section_sub_header}</h2><br/></apex:outputPanel>
            <apex:pageBlockSection id="buttonsLayersSection" columns="1">
                <apex:pageBlockSectionItem >   
                    <apex:panelGrid columns="2" id="theGrid">
                        <apex:commandButton action="{!saveLayerDocuments}" rerender="layerSection" oncomplete="document.getElementById('{!$Component.layerTemplateSelectorPanel}').style.display = 'none'; document.getElementById('{!$Component.agreementPanel}').style.display = 'block'; return false;" value="{!$Label.echosign_dev1__save_button_label}" disabled="{!libraryLayerController.isSaveDisabled}"/>
                        <apex:commandButton action="{!cancelLayerDocuments}" oncomplete="document.getElementById('{!$Component.layerTemplateSelectorPanel}').style.display = 'none'; document.getElementById('{!$Component.agreementPanel}').style.display = 'block'; return false;" value="{!$Label.echosign_dev1__cancel_button_label}"/>
                    </apex:panelGrid>        
                </apex:pageBlockSectionItem>                
            </apex:pageBlockSection>
            
            <apex:outputpanel layout="block" >        
                <apex:pageBlockTable id="documentLayersTable" value="{!libraryLayerController.libraryTemplateWrappers}" rowClasses="firstHeaderRow" var="libraryTemplateWrapper" columns="3" width="100%">
                    <apex:column width="20px">
                        <apex:facet name="header"></apex:facet>
                        <apex:inputCheckbox value="{!libraryTemplateWrapper.isSelected}">
                                <apex:actionSupport event="onchange" action="{!libraryLayerController.onSelectionChanged}" rerender="buttonsLayersSection,documentLayersTable">
                                    <apex:param name="selectedLibraryKey" value="{!libraryTemplateWrapper.documentLibrary.documentKey}" assignTo="{!libraryLayerController.selectedLibraryKey}"/>
                                </apex:actionSupport>
                                <apex:actionSupport event="onclick" action="{!libraryLayerController.onSelectionChanged}" rerender="buttonsLayersSection,documentLayersTable">
                                    <apex:param name="selectedLibraryKey" value="{!libraryTemplateWrapper.documentLibrary.documentKey}" assignTo="{!libraryLayerController.selectedLibraryKey}"/>
                                </apex:actionSupport>
                        </apex:inputCheckbox>
                    </apex:column>              
                   <apex:column >
                        <apex:facet name="header">
                            <apex:outputPanel >
                                <apex:commandLink value="{!$Label.echosign_dev1__library_template_name_column_label}" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                    <apex:param name="sortField" value="Name" assignTo="{!libraryLayerController.sortField}"/>
                                </apex:commandLink>
                                <apex:image value="{!$Resource.echosign_dev1__SortDescArrow}" title="{!$Label.echosign_dev1__sort_descending_label}" rendered="{! libraryLayerController.previousSortField = libraryLayerController.sortField && libraryLayerController.isSortedByName }">
                                    <apex:actionSupport event="onclick" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                        <apex:param name="sortField" value="Name" assignTo="{!libraryLayerController.sortField}"/>
                                    </apex:actionSupport>
                                </apex:image>
                                <apex:image value="{!$Resource.echosign_dev1__SortAscArrow}" title="{!$Label.echosign_dev1__sort_ascending_label}" rendered="{! libraryLayerController.previousSortField <> libraryLayerController.sortField && libraryLayerController.isSortedByName }">
                                    <apex:actionSupport event="onclick" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                        <apex:param name="sortField" value="Name" assignTo="{!libraryLayerController.sortField}"/>
                                    </apex:actionSupport>
                                </apex:image>
                            </apex:outputPanel>
                        </apex:facet>
                        <apex:image title="{!$Label.echosign_dev1__library_layer_template_tooltip}" style="vertical-align: text-bottom;" value="{!$Resource.echosign_dev1__LibraryFieldsTemplate}" />
                        &nbsp;<apex:outputText value="{!libraryTemplateWrapper.documentLibrary.name}"/>             
                  </apex:column>
                  <apex:column >
                    <apex:facet name="header">
                        <apex:outputPanel >
                            <apex:commandLink value="{!$ObjectType.echosign_dev1__Library_Template__c.fields.echosign_dev1__Last_Modified__c.label}" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryLayerController.sortField}"/>
                            </apex:commandLink>
                            <apex:image value="{!$Resource.echosign_dev1__SortDescArrow}" title="{!$Label.echosign_dev1__sort_descending_label}" rendered="{! libraryLayerController.previousSortField = libraryLayerController.sortField && libraryLayerController.isSortedByModifiedDate }">
                                <apex:actionSupport event="onclick" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                    <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryLayerController.sortField}"/>
                                </apex:actionSupport>
                            </apex:image>
                            <apex:image value="{!$Resource.echosign_dev1__SortAscArrow}" title="{!$Label.echosign_dev1__sort_ascending_label}" rendered="{! libraryLayerController.previousSortField <> libraryLayerController.sortField && libraryLayerController.isSortedByModifiedDate }">
                                <apex:actionSupport event="onclick" action="{!libraryLayerController.doSort}" rerender="documentLayersTable">
                                    <apex:param name="sortField" value="ModifiedDate" assignTo="{!libraryLayerController.sortField}"/>
                                </apex:actionSupport>
                            </apex:image>
                        </apex:outputPanel>
                    </apex:facet>
                    <apex:outputText value="{0, date, short}">
                        <apex:param value="{!libraryTemplateWrapper.documentLibrary.modifiedDate}"/>
                    </apex:outputText>
                  </apex:column>  
                </apex:pageBlockTable>
            </apex:outputpanel>
        </apex:pageBlock>
    </apex:form>
</div> 
    </apex:outputPanel>
    
    
    <div id="viewAgreementConsolePanel" style="display: none;">
    </div>
    
    <div id="replaceSignerDialog" style="display: none;">
        <apex:outputPanel id="replaceSignersOutputPanel">
            <apex:form >
                <apex:outputPanel id="replaceSignerPanel">
                    <div>
                        <apex:outputLabel value="{! JSENCODE($Label.Replace_Signer_Prompt) }"/>
                    </div>
                    <div style="padding-top: 10px;">
                        <apex:outputLabel value="{!$Label.echosign_dev1__replace_signer_message_prompt}"/>
                        <apex:inputTextarea value="{!replaceMessage}" style="resize: none; border-style: inset; border-width: 2px; width: 95%; height: 75px; border-radius: 3px; margin-top: 5px;" id="replaceSignerReasonInput" >
                            <apex:actionSupport rerender="replaceSignerButtonsPanel" action="{!replaceReasonInput}" event="onkeyup" />
                        </apex:inputTextarea>
                    </div>
                    <apex:outputPanel id="replaceSignerButtonsPanel">
                    <div style="margin-top: 10px;">
                        <apex:panelGrid columns="2" id="theGrid">
                            <apex:commandButton id="replaceSignerOkButton" disabled="{!replaceSignerOkDisabled}" onclick="$jquery( getSelectorFromSalesforceId('{!$Component.replaceSignerOkButton}') ).prop('disabled', true); var message = $jquery( getSelectorFromSalesforceId('{!$Component.replaceSignerReasonInput}') ).val(); doReplaceRecipientSubmit(message); return false;" value="{!$Label.echosign_dev1__ok_button_label}" />
                            <apex:commandButton onclick="hideReplaceSignerDialog(); return false;" value="{!$Label.echosign_dev1__cancel_button_label}" />
                        </apex:panelGrid>
                    </div>
                    </apex:outputPanel>
                </apex:outputPanel>
            </apex:form>
        </apex:outputPanel>
    </div>
    
    <div id="cancelAgreementDialog" style="display: none;">
        <apex:outputPanel id="cancelAgreementOutputPanel">
            <apex:form >
                <apex:outputPanel id="cancelAgreementPanel">
                    <div>
                        <apex:outputLabel value="{! JSENCODE($Label.echosign_dev1__cancel_agreement_prompt) } {!agreement.Name}?"/>
                    </div>
                    <div style="margin-top: 10px;">
                        <input id="cancelAgreementNotifyInput" type="checkbox" name="toggle" />
                        <apex:outputLabel value="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Cancel_Delete_Notify_Signer__c.label}" for="cancelAgreementNotifyInput" />
                    </div>
                    <div style="padding-top: 10px;">
                        <apex:outputLabel value="{!$Label.echosign_dev1__reason_cancel_prompt}"/>
                        <textarea style="resize: none; border-style: inset; border-width: 2px; width: 95%; height: 75px; border-radius: 3px; margin-top: 5px;" id="cancelAgreementSignerReasonInput" />
                    </div>
                    <div style="margin-top: 10px;">
                        <apex:panelGrid columns="2" id="theGrid">
                            <apex:commandButton onclick="var reason = $jquery('#cancelAgreementSignerReasonInput').val(); var notify = $jquery('#cancelAgreementNotifyInput').is(':checked'); hideCancelAgreementDialog(); cancelAgreement(reason, notify); return false;" value="{!$Label.echosign_dev1__ok_button_label}" />
                            <apex:commandButton onclick="hideCancelAgreementDialog(); return false;" value="{!$Label.echosign_dev1__cancel_button_label}" />
                        </apex:panelGrid>
                    </div>
                </apex:outputPanel>
            </apex:form>
        </apex:outputPanel>
    </div>
    
    <div id="removeAgreementDialog" style="display: none;">
        <apex:outputPanel id="removeAgreementOutputPanel">
            <apex:form >
                <apex:variable var="agreementStatus" value="{!agreement.echosign_dev1__Status__c}"/>
                <apex:variable var="inProgress" value="{! agreementStatus == 'Out for Signature' || agreementStatus == 'Out for Approval' || agreementStatus == 'Waiting for Counter-Signature' || agreementStatus == 'Waiting for Counter-Approval' || agreementStatus == 'WidgetWaitingForVerification' || agreementStatus == 'WIDGET_WAITING_FOR_VERIFICATION' }"/>
                <apex:outputPanel id="removeAgreementPanel">
                    <div>
                        <apex:outputLabel value="{! JSENCODE($Label.echosign_dev1__delete_agreement_prompt) } {!agreement.Name}?"/>
                    </div>
                    <apex:outputPanel layout="block" rendered="{!inProgress}">
                        <input id="removeAgreementNotifyInput" type="checkbox" name="toggle" />
                        <apex:outputLabel value="{!$ObjectType.echosign_dev1__SIGN_Agreement__c.fields.echosign_dev1__Cancel_Delete_Notify_Signer__c.label}" for="removeAgreementNotifyInput" />
                    </apex:outputPanel>
                    <apex:outputPanel layout="block" rendered="{!inProgress}">
                        <apex:outputLabel value="{!$Label.echosign_dev1__reason_delete_prompt}"/>
                        <textarea style="resize: none; border-style: inset; border-width: 2px; width: 95%; height: 75px; border-radius: 3px; margin-top: 5px;" id="removeAgreementSignerReasonInput" />
                    </apex:outputPanel>
                    <div style="margin-top: 10px;">
                        <apex:panelGrid columns="2" id="theGrid">
                            <apex:commandButton onclick="var reason = $jquery('#removeAgreementSignerReasonInput').val(); var notify = $jquery('#removeAgreementNotifyInput').is(':checked'); hideRemoveAgreementDialog(); deleteAgreement(reason, notify); return false;" value="{!$Label.echosign_dev1__ok_button_label}" />
                            <apex:commandButton onclick="hideRemoveAgreementDialog(); return false;" value="{!$Label.echosign_dev1__cancel_button_label}" />
                        </apex:panelGrid>
                    </div>
                </apex:outputPanel>
            </apex:form>
        </apex:outputPanel> 
    </div>
        
</apex:page>